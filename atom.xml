<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Eugene's Blog]]></title>
  <subtitle><![CDATA[成长之旅]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://eugeneyang.com/"/>
  <updated>2016-01-26T13:03:09.522Z</updated>
  <id>http://eugeneyang.com/</id>
  
  <author>
    <name><![CDATA[Jian Yang]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Construct Binary Tree from Inorder and Postorder Traversal - 根据后序和中序序列重构二叉树]]></title>
    <link href="http://eugeneyang.com/2016/01/26/Construct%20Binary%20Tree%20from%20Inorder%20and%20Postorder%20Traversal%20-%20%E6%A0%B9%E6%8D%AE%E5%90%8E%E5%BA%8F%E5%92%8C%E4%B8%AD%E5%BA%8F%E5%BA%8F%E5%88%97%E9%87%8D%E6%9E%84%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>http://eugeneyang.com/2016/01/26/Construct Binary Tree from Inorder and Postorder Traversal - 根据后序和中序序列重构二叉树/</id>
    <published>2016-01-26T12:44:47.000Z</published>
    <updated>2016-01-26T13:03:09.522Z</updated>
    <content type="html"><![CDATA[<h3 id="Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal_-_根据后序和中序序列重构二叉树">Construct Binary Tree from Inorder and Postorder Traversal - 根据后序和中序序列重构二叉树</h3><p><strong>Description</strong>: Given inorder and postorder traversal of a tree, construct the binary tree.</p>
<p>Note: You may assume that duplicates do not exist in the tree.</p>
<p> 思路：递归，与Construct Binary Tree from Preorder and Inorder Traversal思路一致。后序序列最后一个为根.中序序列的根的左侧序列为左子树,右侧序列为右子树。根据左右序列长度可以在后序序列中找到左右子树.<br>示例:<br>     in-order:   4 2 5 (1) 6 7 3 8<br>     post-order: 4 5 2  6 7 8 3  (1)</p>
<p>完整的java代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstructBinaryTreeFromInorderAndPostorderTraversal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Definition for a binary tree node.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> val;</span><br><span class="line">        TreeNode left;</span><br><span class="line">        TreeNode right;</span><br><span class="line">        TreeNode(<span class="keyword">int</span> x) &#123; val = x; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 递归:后序序列最后一个为根.中序序列的根的左侧序列为左子树,右侧序列为右子树.</span><br><span class="line">     根据左右序列长度可以在后序序列中找到左右子树.</span><br><span class="line">     * 示例:</span><br><span class="line">     in-order:   4 2 5 (1) 6 7 3 8</span><br><span class="line">     post-order: 4 5 2  6 7 8 3  (1)</span><br><span class="line">     * <span class="doctag">@param</span> inorder</span><br><span class="line">     * <span class="doctag">@param</span> postorder</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span>[] inorder, <span class="keyword">int</span>[] postorder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rebuild(postorder, inorder, <span class="number">0</span>, postorder.length-<span class="number">1</span>, <span class="number">0</span>, inorder.length-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> TreeNode <span class="title">rebuild</span><span class="params">(<span class="keyword">int</span>[] postorder, <span class="keyword">int</span>[] inorder, <span class="keyword">int</span> postL, <span class="keyword">int</span> postR, <span class="keyword">int</span> inL, <span class="keyword">int</span> inR)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (postL&gt;postR || inL&gt;inR) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        TreeNode root = <span class="keyword">new</span> TreeNode(postorder[postR]);</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (; i&lt;inorder.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (inorder[i] == postorder[postR]) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> postLeftLen = i - inL;</span><br><span class="line">        root.left = rebuild(postorder, inorder, postL, postL+postLeftLen-<span class="number">1</span>, inL, i-<span class="number">1</span>);</span><br><span class="line">        root.right = rebuild(postorder, inorder, postL+postLeftLen, postR-<span class="number">1</span>, i+<span class="number">1</span>, inR);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal_-_根据后序和中序序列重构二叉树">Construct Binary Tree from Inorder and Postorder Traver]]>
    </summary>
    
      <category term="LeetCode" scheme="http://eugeneyang.com/tags/LeetCode/"/>
    
      <category term="java" scheme="http://eugeneyang.com/tags/java/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/categories/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Construct Binary Tree from Preorder and Inorder Traversal - 根据先序和中序序列重构二叉树]]></title>
    <link href="http://eugeneyang.com/2016/01/25/Construct%20Binary%20Tree%20from%20Preorder%20and%20Inorder%20Traversal%20-%20%E6%A0%B9%E6%8D%AE%E5%85%88%E5%BA%8F%E5%92%8C%E4%B8%AD%E5%BA%8F%E5%BA%8F%E5%88%97%E9%87%8D%E6%9E%84%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>http://eugeneyang.com/2016/01/25/Construct Binary Tree from Preorder and Inorder Traversal - 根据先序和中序序列重构二叉树/</id>
    <published>2016-01-25T12:44:47.000Z</published>
    <updated>2016-01-26T13:03:09.516Z</updated>
    <content type="html"><![CDATA[<h3 id="Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal_-_根据先序和中序序列重构二叉树">Construct Binary Tree from Preorder and Inorder Traversal - 根据先序和中序序列重构二叉树</h3><p><strong>Description</strong>: Given preorder and inorder traversal of a tree, construct the binary tree.</p>
<p>Note: You may assume that duplicates do not exist in the tree.</p>
<p> 思路：递归。先序序列第一个为根.中序序列的根的左侧序列为左子树,右侧序列为右子树。根据左右序列长度可以在先序序列中找到左右子树.<br>示例:<br>     in-order:   4 2 5 (1) 6 7 3 8<br>     pre-order: (1) 2 4 5  3 7 6 8</p>
<p>参考：<a href="http://www.programcreek.com/2014/06/leetcode-construct-binary-tree-from-preorder-and-inorder-traversal-java/" target="_blank" rel="external">http://www.programcreek.com/2014/06/leetcode-construct-binary-tree-from-preorder-and-inorder-traversal-java/</a></p>
<p>完整的java代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstructBinaryTreeFromPreorderAndInorderTraversal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Definition for a binary tree node.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> val;</span><br><span class="line">        TreeNode left;</span><br><span class="line">        TreeNode right;</span><br><span class="line">        TreeNode(<span class="keyword">int</span> x) &#123; val = x; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**http://www.programcreek.com/2014/06/leetcode-construct-binary-tree-from-preorder-and-inorder-traversal-java/</span><br><span class="line">     * 递归:先序序列第一个为根.中序序列的根的左侧序列为左子树,右侧序列为右子树.</span><br><span class="line">     根据左右序列长度可以在先序序列中找到左右子树.</span><br><span class="line">     * 示例:</span><br><span class="line">     in-order:   4 2 5 (1) 6 7 3 8</span><br><span class="line">     pre-order: (1) 2 4 5  3 7 6 8</span><br><span class="line">     * <span class="doctag">@param</span> preorder</span><br><span class="line">     * <span class="doctag">@param</span> inorder</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span>[] preorder, <span class="keyword">int</span>[] inorder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rebuild(preorder, inorder, <span class="number">0</span>, preorder.length-<span class="number">1</span>, <span class="number">0</span>, inorder.length-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> TreeNode <span class="title">rebuild</span><span class="params">(<span class="keyword">int</span>[] preorder, <span class="keyword">int</span>[] inorder, <span class="keyword">int</span> preL, <span class="keyword">int</span> preR, <span class="keyword">int</span> inL, <span class="keyword">int</span> inR)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (preL&gt;preR || inL&gt;inR) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        TreeNode root = <span class="keyword">new</span> TreeNode(preorder[preL]);</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (; i&lt;inorder.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (inorder[i] == preorder[preL]) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> preLeftLen = i - inL;</span><br><span class="line">        root.left = rebuild(preorder, inorder, preL+<span class="number">1</span>, preL+preLeftLen, inL, i-<span class="number">1</span>);</span><br><span class="line">        root.right = rebuild(preorder, inorder, preL+preLeftLen+<span class="number">1</span>, preR, i+<span class="number">1</span>, inR);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal_-_根据先序和中序序列重构二叉树">Construct Binary Tree from Preorder and Inorder Traversa]]>
    </summary>
    
      <category term="LeetCode" scheme="http://eugeneyang.com/tags/LeetCode/"/>
    
      <category term="java" scheme="http://eugeneyang.com/tags/java/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/categories/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Maximum Depth of Binary Tree -二叉树最大深度]]></title>
    <link href="http://eugeneyang.com/2016/01/24/Maximum%20Depth%20of%20Binary%20Tree%20-%20%E4%BA%8C%E5%8F%89%E6%A0%91%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6/"/>
    <id>http://eugeneyang.com/2016/01/24/Maximum Depth of Binary Tree - 二叉树最大深度/</id>
    <published>2016-01-24T12:44:47.000Z</published>
    <updated>2016-01-26T13:03:09.496Z</updated>
    <content type="html"><![CDATA[<h3 id="Maximum_Depth_of_Binary_Tree_-二叉树最大深度">Maximum Depth of Binary Tree -二叉树最大深度</h3><p><strong>Description</strong>: Given a binary tree, find its maximum depth. The maximum depth is the number of nodes along the longest path from the root node<br> down to the farthest leaf node.</p>
<p> 思路：DFS递归。</p>
<p>完整的java代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaximumDepthOfBinaryTree</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Definition for a binary tree node.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> val;</span><br><span class="line">        TreeNode left;</span><br><span class="line">        TreeNode right;</span><br><span class="line">        TreeNode(<span class="keyword">int</span> x) &#123; val = x; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> maxL = maxDepth(root.left);</span><br><span class="line">        <span class="keyword">int</span> maxR = maxDepth(root.right);</span><br><span class="line">        <span class="keyword">return</span> Math.max(maxL, maxR) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Maximum_Depth_of_Binary_Tree_-二叉树最大深度">Maximum Depth of Binary Tree -二叉树最大深度</h3><p><strong>Description</strong>: Given a binary tre]]>
    </summary>
    
      <category term="LeetCode" scheme="http://eugeneyang.com/tags/LeetCode/"/>
    
      <category term="java" scheme="http://eugeneyang.com/tags/java/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/categories/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Binary Tree Zigzag Level Order Traversal -二叉树Z形遍历]]></title>
    <link href="http://eugeneyang.com/2016/01/23/Binary%20Tree%20Zigzag%20Level%20Order%20Traversal%20-%20%E4%BA%8C%E5%8F%89%E6%A0%91Z%E5%BD%A2%E9%81%8D%E5%8E%86/"/>
    <id>http://eugeneyang.com/2016/01/23/Binary Tree Zigzag Level Order Traversal - 二叉树Z形遍历/</id>
    <published>2016-01-23T12:44:47.000Z</published>
    <updated>2016-01-26T13:03:09.494Z</updated>
    <content type="html"><![CDATA[<h3 id="Binary_Tree_Zigzag_Level_Order_Traversal_-二叉树Z形遍历">Binary Tree Zigzag Level Order Traversal -二叉树Z形遍历</h3><p><strong>Description</strong>: Given a binary tree, return the zigzag level order traversal of its nodes’ values. (ie, from left to right, then right to left for the next level and alternate between).</p>
<p>For example: Given binary tree {3,9,20,#,#,15,7},<br>return its zigzag level order traversal as: [ [3], [20,9], [15,7] ]</p>
<p> 思路：广度优先搜索，使用队列或栈实现。由于题目要求按层返回结果,需要利用两个队列或栈。思路类似Binary Tree Level Order Traversal，不同点在于入队列或栈时注意顺序逆转。</p>
<p>完整的java代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BinaryTreeZigzagLevelOrderTraversal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Definition for a binary tree node.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> val;</span><br><span class="line">        TreeNode left;</span><br><span class="line">        TreeNode right;</span><br><span class="line">        TreeNode(<span class="keyword">int</span> x) &#123; val = x; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; zigzagLevelOrder(TreeNode root) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;Integer&gt; temp = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">boolean</span> needReverse = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (root==<span class="keyword">null</span>) <span class="keyword">return</span> result;</span><br><span class="line">        Stack&lt;TreeNode&gt; curStack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        Stack&lt;TreeNode&gt; nextStack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        curStack.push(root);</span><br><span class="line">        <span class="keyword">while</span> (!curStack.isEmpty())&#123;</span><br><span class="line">            TreeNode node = curStack.pop();</span><br><span class="line">            temp.add(node.val);</span><br><span class="line">            <span class="keyword">if</span> (needReverse) &#123;</span><br><span class="line">                <span class="keyword">if</span> (node.right!=<span class="keyword">null</span>) nextStack.push(node.right);</span><br><span class="line">                <span class="keyword">if</span> (node.left!=<span class="keyword">null</span>) nextStack.push(node.left);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (node.left!=<span class="keyword">null</span>) nextStack.push(node.left);</span><br><span class="line">                <span class="keyword">if</span> (node.right!=<span class="keyword">null</span>) nextStack.push(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (curStack.isEmpty()) &#123;</span><br><span class="line">                result.add(temp);</span><br><span class="line">                temp = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                needReverse = !needReverse;</span><br><span class="line">                curStack = nextStack;</span><br><span class="line">                nextStack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Binary_Tree_Zigzag_Level_Order_Traversal_-二叉树Z形遍历">Binary Tree Zigzag Level Order Traversal -二叉树Z形遍历</h3><p><strong>Description</str]]>
    </summary>
    
      <category term="LeetCode" scheme="http://eugeneyang.com/tags/LeetCode/"/>
    
      <category term="java" scheme="http://eugeneyang.com/tags/java/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/categories/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Binary Tree Level Order Traversal -二叉树层次遍历]]></title>
    <link href="http://eugeneyang.com/2016/01/22/Binary%20Tree%20Level%20Order%20Traversal%20-%20%E4%BA%8C%E5%8F%89%E6%A0%91%E5%B1%82%E6%AC%A1%E9%81%8D%E5%8E%86/"/>
    <id>http://eugeneyang.com/2016/01/22/Binary Tree Level Order Traversal - 二叉树层次遍历/</id>
    <published>2016-01-22T12:44:47.000Z</published>
    <updated>2016-01-26T13:03:09.492Z</updated>
    <content type="html"><![CDATA[<h3 id="Binary_Tree_Level_Order_Traversal_-二叉树层次遍历">Binary Tree Level Order Traversal -二叉树层次遍历</h3><p><strong>Description</strong>: Given a binary tree, return the level order traversal of its nodes’ values. (ie, from left to right, level by level).<br> For example:<br> Given binary tree {3,9,20,#,#,15,7},<br> return its level order traversal as: [ [3], [9,20], [15,7] ]</p>
<p> 思路：广度优先搜索，使用队列实现。<br>     a. 队列初始化，将根节点压入队列。<br>     b. 当队列不为空，进行如下操作：弹出一个节点，访问；若左子节点或右子节点不为空，将其压入队列。<br>     由于题目要求按层返回结果,需要利用两个队列.</p>
<p>完整的java代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BinaryTreeLevelOrderTraversal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Definition for a binary tree node.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> val;</span><br><span class="line">        TreeNode left;</span><br><span class="line">        TreeNode right;</span><br><span class="line">        TreeNode(<span class="keyword">int</span> x) &#123; val = x; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 广度优先搜索，使用队列实现。</span><br><span class="line">     a. 队列初始化，将根节点压入队列。</span><br><span class="line">     b. 当队列不为空，进行如下操作：弹出一个节点，访问；若左子节点或右子节点不为空，将其压入队列。</span><br><span class="line">     由于题目要求按层返回结果,需要利用两个队列.</span><br><span class="line">     * <span class="doctag">@param</span> root</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;Integer&gt; temp = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (root==<span class="keyword">null</span>) <span class="keyword">return</span> result;</span><br><span class="line">        Queue&lt;TreeNode&gt; curQueue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        Queue&lt;TreeNode&gt; nextQueue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        curQueue.offer(root);</span><br><span class="line">        <span class="keyword">while</span> (!curQueue.isEmpty())&#123;</span><br><span class="line">            TreeNode node = curQueue.poll();</span><br><span class="line">            temp.add(node.val);</span><br><span class="line">            <span class="keyword">if</span> (node.left!=<span class="keyword">null</span>) nextQueue.offer(node.left);</span><br><span class="line">            <span class="keyword">if</span> (node.right!=<span class="keyword">null</span>) nextQueue.offer(node.right);</span><br><span class="line">            <span class="keyword">if</span> (curQueue.isEmpty()) &#123;</span><br><span class="line">                result.add(temp);</span><br><span class="line">                temp = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                curQueue = nextQueue;</span><br><span class="line">                nextQueue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Binary_Tree_Level_Order_Traversal_-二叉树层次遍历">Binary Tree Level Order Traversal -二叉树层次遍历</h3><p><strong>Description</strong>: Given a ]]>
    </summary>
    
      <category term="LeetCode" scheme="http://eugeneyang.com/tags/LeetCode/"/>
    
      <category term="java" scheme="http://eugeneyang.com/tags/java/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/categories/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Symmetric Tree - 对称二叉树]]></title>
    <link href="http://eugeneyang.com/2016/01/21/Symmetric%20Tree%20-%20%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>http://eugeneyang.com/2016/01/21/Symmetric Tree - 对称二叉树/</id>
    <published>2016-01-21T12:44:47.000Z</published>
    <updated>2016-01-21T06:55:54.384Z</updated>
    <content type="html"><![CDATA[<h3 id="Symmetric_Tree_-_对称二叉树">Symmetric Tree - 对称二叉树</h3><p><strong>Description</strong>: Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).</p>
<p>Note: Bonus points if you could solve it both recursively and iteratively.</p>
<p>原题链接：<a href="https://leetcode.com/problems/symmetric-tree/" target="_blank" rel="external">https://leetcode.com/problems/symmetric-tree/</a></p>
<p> 思路：递归（与Same Tree类似），或者迭代（使用两个队列）。</p>
<p>完整的java代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SymmetricTree</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Definition for a binary tree node.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> val;</span><br><span class="line">        TreeNode left;</span><br><span class="line">        TreeNode right;</span><br><span class="line">        TreeNode(<span class="keyword">int</span> x) &#123; val = x; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 递归:思路类似Same Tree</span><br><span class="line">     * <span class="doctag">@param</span> root</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSymmetric</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span> isSymmetricHelper(root.left, root.right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isSymmetricHelper</span><span class="params">(TreeNode p, TreeNode q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(p == <span class="keyword">null</span> &amp;&amp; q == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(p != <span class="keyword">null</span> &amp;&amp; q != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p.val == q.val)  <span class="comment">//TODO 注意交换次序</span></span><br><span class="line">                <span class="keyword">return</span> isSymmetricHelper(p.left, q.right) &amp;&amp; isSymmetricHelper(p.right, q.left);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 迭代:使用两个队列</span><br><span class="line">     * <span class="doctag">@param</span> root</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSymmetric1</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        Queue&lt;TreeNode&gt; leftQ = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        Queue&lt;TreeNode&gt; rightQ = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        leftQ.offer(root.left);</span><br><span class="line">        rightQ.offer(root.right);</span><br><span class="line">        <span class="keyword">while</span> (!leftQ.isEmpty() &amp;&amp; !rightQ.isEmpty())&#123;</span><br><span class="line">            TreeNode l = leftQ.poll();</span><br><span class="line">            TreeNode r = rightQ.poll();</span><br><span class="line">            <span class="keyword">if</span> (l==<span class="keyword">null</span> &amp;&amp; r==<span class="keyword">null</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (l==<span class="keyword">null</span> || r==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (l.val != r.val) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">else</span>&#123;   <span class="comment">//TODO 注意交换次序</span></span><br><span class="line">                leftQ.offer(l.left);</span><br><span class="line">                leftQ.offer(l.right);</span><br><span class="line">                rightQ.offer(r.right);</span><br><span class="line">                rightQ.offer(r.left);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Symmetric_Tree_-_对称二叉树">Symmetric Tree - 对称二叉树</h3><p><strong>Description</strong>: Given a binary tree, check whether it is a mirro]]>
    </summary>
    
      <category term="LeetCode" scheme="http://eugeneyang.com/tags/LeetCode/"/>
    
      <category term="java" scheme="http://eugeneyang.com/tags/java/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/categories/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Same Tree - 是否为同一二叉树]]></title>
    <link href="http://eugeneyang.com/2016/01/20/Same%20Tree%20-%20%E7%9B%B8%E5%90%8C%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>http://eugeneyang.com/2016/01/20/Same Tree - 相同二叉树/</id>
    <published>2016-01-20T12:44:47.000Z</published>
    <updated>2016-01-21T06:55:54.382Z</updated>
    <content type="html"><![CDATA[<h3 id="Same_Tree_-_是否为同一二叉树">Same Tree - 是否为同一二叉树</h3><p><strong>Description</strong>: Given two binary trees, write a function to check if they are equal or not.</p>
<p>Two binary trees are considered equal if they are structurally identical and the nodes have the same value.</p>
<p> 思路：递归。</p>
<p>完整的java代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SameTree</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TreeNode p = <span class="keyword">new</span> TreeNode(<span class="number">0</span>);</span><br><span class="line">        TreeNode q = <span class="keyword">new</span> TreeNode(<span class="number">0</span>);</span><br><span class="line">        System.out.println(<span class="string">"*****RESULT*****"</span>);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> SameTree().isSameTree(p, q));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//Definition for a binary tree node.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> val;</span><br><span class="line">        TreeNode left;</span><br><span class="line">        TreeNode right;</span><br><span class="line">        TreeNode(<span class="keyword">int</span> x) &#123; val = x; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSameTree</span><span class="params">(TreeNode p, TreeNode q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(p == <span class="keyword">null</span> &amp;&amp; q == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(p != <span class="keyword">null</span> &amp;&amp; q != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p.val == q.val)</span><br><span class="line">                <span class="keyword">return</span> isSameTree(p.left, q.left) &amp;&amp; isSameTree(q.right, p.right);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSameTree1</span><span class="params">(TreeNode p, TreeNode q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (p==<span class="keyword">null</span> &amp;&amp; q==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        List&lt;Integer&gt; pInts = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;Integer&gt; qInts = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        inOrderTraverse(p, pInts, <span class="keyword">true</span>);</span><br><span class="line">        inOrderTraverse(q, qInts, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">if</span> (pInts.size() != qInts.size()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;pInts.size(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> ((<span class="keyword">int</span>)pInts.get(i) != (<span class="keyword">int</span>)qInts.get(i)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;   <span class="comment">//TODO Integer.MIN_VALUE != Integer.MIN_VALUE 必须转成int</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">inOrderTraverse</span><span class="params">(TreeNode root, List&lt;Integer&gt; ints, <span class="keyword">boolean</span> isLeft)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isLeft) ints.add(Integer.MIN_VALUE);</span><br><span class="line">            <span class="keyword">else</span> ints.add(Integer.MAX_VALUE);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        inOrderTraverse(root.left, ints, <span class="keyword">true</span>);</span><br><span class="line">        ints.add(root.val);</span><br><span class="line">        inOrderTraverse(root.right, ints, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Same_Tree_-_是否为同一二叉树">Same Tree - 是否为同一二叉树</h3><p><strong>Description</strong>: Given two binary trees, write a function to check if]]>
    </summary>
    
      <category term="LeetCode" scheme="http://eugeneyang.com/tags/LeetCode/"/>
    
      <category term="java" scheme="http://eugeneyang.com/tags/java/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/categories/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Recover Binary Search Tree - 修复二叉搜索树]]></title>
    <link href="http://eugeneyang.com/2016/01/19/Recover%20Binary%20Search%20Tree%20-%20%E4%BF%AE%E5%A4%8D%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
    <id>http://eugeneyang.com/2016/01/19/Recover Binary Search Tree - 修复二叉搜索树/</id>
    <published>2016-01-19T12:44:47.000Z</published>
    <updated>2016-01-19T12:45:33.031Z</updated>
    <content type="html"><![CDATA[<h3 id="Recover_Binary_Search_Tree_-_修复二叉搜索树">Recover Binary Search Tree - 修复二叉搜索树</h3><p><strong>Description</strong>: Two elements of a binary search tree (BST) are swapped by mistake. Recover the tree without changing its structure.</p>
<p>Note:<br>A solution using O(n) space is pretty straight forward. Could you devise a constant space solution?</p>
<p> 思路：<br> 1 空间复杂度O(1)：双指针；<br> 2 空间复杂度O(n)：借助数组。</p>
<p>双指针方法参考：<a href="http://yucoding.blogspot.com/2013/03/leetcode-question-75-recover-binary.html" target="_blank" rel="external">http://yucoding.blogspot.com/2013/03/leetcode-question-75-recover-binary.html</a></p>
<p>完整的java代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RecoverBinarySearchTree</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Definition for a binary tree node.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> val;</span><br><span class="line">        TreeNode left;</span><br><span class="line">        TreeNode right;</span><br><span class="line">        TreeNode(<span class="keyword">int</span> x) &#123; val = x; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 空间复杂度O(1),注意pre存的是中序次序的上一个节点</span><br><span class="line">     * 示例:The inorder traversal is :  1 3 4 6 7 8 10 13 14</span><br><span class="line">     * If we change the value 4 and 8:  1 3 (8) 6 7 (4) 10 13 14</span><br><span class="line">     * 参考:http://yucoding.blogspot.com/2013/03/leetcode-question-75-recover-binary.html</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> TreeNode first=<span class="keyword">null</span>, second=<span class="keyword">null</span>, pre=<span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recoverTree</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        inOrder(root);</span><br><span class="line">        <span class="keyword">int</span> temp = first.val;</span><br><span class="line">        first.val = second.val;</span><br><span class="line">        second.val = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        inOrder(root.left);</span><br><span class="line">        <span class="keyword">if</span> (pre == <span class="keyword">null</span>) pre = root;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (pre.val &gt; root.val)&#123;</span><br><span class="line">                <span class="keyword">if</span> (first == <span class="keyword">null</span>) first = pre; <span class="comment">//第一个错误节点:当前节点的上一节点</span></span><br><span class="line">                second = root;<span class="comment">//第二个错误节点:当前节点</span></span><br><span class="line">            &#125;</span><br><span class="line">            pre = root;</span><br><span class="line">        &#125;</span><br><span class="line">        inOrder(root.right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 空间复杂度O(n)</span><br><span class="line">     * <span class="doctag">@param</span> root</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recoverTree1</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; ints = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;TreeNode&gt; nodes = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        inOrderTraverse(root, ints, nodes);</span><br><span class="line">        Collections.sort(ints);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;ints.size(); i++)&#123;</span><br><span class="line">            nodes.get(i).val = ints.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">inOrderTraverse</span><span class="params">(TreeNode root, List&lt;Integer&gt; ints, List&lt;TreeNode&gt; nodes)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root==<span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        inOrderTraverse(root.left, ints, nodes);</span><br><span class="line">        ints.add(root.val);</span><br><span class="line">        nodes.add(root);</span><br><span class="line">        inOrderTraverse(root.right, ints, nodes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Recover_Binary_Search_Tree_-_修复二叉搜索树">Recover Binary Search Tree - 修复二叉搜索树</h3><p><strong>Description</strong>: Two elements of a bi]]>
    </summary>
    
      <category term="LeetCode" scheme="http://eugeneyang.com/tags/LeetCode/"/>
    
      <category term="java" scheme="http://eugeneyang.com/tags/java/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/categories/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Interleaving String - 交叉字符串]]></title>
    <link href="http://eugeneyang.com/2016/01/18/Interleaving%20String%20-%20%E4%BA%A4%E5%8F%89%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://eugeneyang.com/2016/01/18/Interleaving String - 交叉字符串/</id>
    <published>2016-01-18T12:44:47.000Z</published>
    <updated>2016-01-18T12:29:24.823Z</updated>
    <content type="html"><![CDATA[<h3 id="Interleaving_String_-_交叉字符串">Interleaving String - 交叉字符串</h3><p><strong>Description</strong>: Given s1, s2, s3, find whether s3 is formed by the interleaving of s1 and s2.</p>
<p>For example,<br>Given:<br>s1 = “aabcc”,<br>s2 = “dbbca”,<br>When s3 = “aadbbcbcac”, return true.<br>When s3 = “aadbbbaccc”, return false.</p>
<p> 思路：二维动态规划。用matched[l1][l2]表示s1取l1长度，s2取l2长度，是否能匹配s3的l1+12长度。<br>     递推式：</p>
<blockquote>
<p>matched[i][j] =<br>　s1.charAt(i-1)==s3.char(i+j-1) &amp;&amp; matched[i-1][j] ||<br>　s2.charAt(j-1)==s3.charAt(i+j-1) &amp;&amp; matched[i][j-1];</p>
</blockquote>
<p>边界条件:<br>l1=0 &amp;&amp; l2=0时，matched[0][0] = true;<br>     i=0时，s3[j-1]==s2[j-1], matched[0][j] = matched[0][j-1]<br>            　　　s3[j-1]!=s2[j-1], matched[0][j] = false;<br>     j=0时，s3[i-1]==s1[i-1], matched[i][0] = matched[i-1][0]<br>            　　　s3[i-1]!=s1[i-1], matched[i][0] = false;</p>
<p>参考：<a href="http://fisherlei.blogspot.in/2012/12/leetcode-interleaving-string.html" target="_blank" rel="external">http://fisherlei.blogspot.in/2012/12/leetcode-interleaving-string.html</a></p>
<p>完整的java代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterleavingString</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"*****RESULT*****"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**http://fisherlei.blogspot.in/2012/12/leetcode-interleaving-string.html</span><br><span class="line">     * 二维动态规划:matched[l1][l2]表示s1取l1长度，s2取l2长度，是否能匹配s3的l1+12长度。</span><br><span class="line">     递推式:matched[i][j] = s1.charAt(i-1)==s3.charAt(i+j-1) &amp;&amp; matched[i-1][j] ||</span><br><span class="line">                            s2.charAt(j-1)==s3.charAt(i+j-1) &amp;&amp; matched[i][j-1];</span><br><span class="line">     边界条件:l1=0 &amp;&amp; l2=0时，matched[0][0] = true;</span><br><span class="line">     i=0时，s3[j-1]==s2[j-1], matched[0][j] = matched[0][j-1]</span><br><span class="line">            s3[j-1]!=s2[j-1], matched[0][j] = false;</span><br><span class="line">     j=0时，s3[i-1]==s1[i-1], matched[i][0] = matched[i-1][0]</span><br><span class="line">            s3[i-1]!=s1[i-1], matched[i][0] = false;</span><br><span class="line">     * <span class="doctag">@param</span> s1</span><br><span class="line">     * <span class="doctag">@param</span> s2</span><br><span class="line">     * <span class="doctag">@param</span> s3</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isInterleave</span><span class="params">(String s1, String s2, String s3)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len1 = s1.length(), len2 = s2.length(), len3 = s3.length();</span><br><span class="line">        <span class="keyword">if</span> (len1==<span class="number">0</span> &amp;&amp; len2==<span class="number">0</span> &amp;&amp; len3==<span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (len1 + len2 != len3) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">boolean</span>[][] matched = <span class="keyword">new</span> <span class="keyword">boolean</span>[len1+<span class="number">1</span>][len2+<span class="number">1</span>];</span><br><span class="line">        matched[<span class="number">0</span>][<span class="number">0</span>] = <span class="keyword">true</span>;   <span class="comment">//二维初始</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=len2; j++)&#123;    <span class="comment">//j一维初始</span></span><br><span class="line">            <span class="keyword">if</span> (s2.charAt(j-<span class="number">1</span>) == s3.charAt(j-<span class="number">1</span>)) matched[<span class="number">0</span>][j] = matched[<span class="number">0</span>][j-<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=len1; i++)&#123;    <span class="comment">//i一维初始</span></span><br><span class="line">            <span class="keyword">if</span> (s1.charAt(i-<span class="number">1</span>) == s3.charAt(i-<span class="number">1</span>)) matched[i][<span class="number">0</span>] = matched[i-<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=len1; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=len2; j++)&#123;</span><br><span class="line">                matched[i][j] = s1.charAt(i-<span class="number">1</span>)==s3.charAt(i+j-<span class="number">1</span>) &amp;&amp; matched[i-<span class="number">1</span>][j] ||</span><br><span class="line">                                s2.charAt(j-<span class="number">1</span>)==s3.charAt(i+j-<span class="number">1</span>) &amp;&amp; matched[i][j-<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> matched[len1][len2];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Interleaving_String_-_交叉字符串">Interleaving String - 交叉字符串</h3><p><strong>Description</strong>: Given s1, s2, s3, find whether s3 is f]]>
    </summary>
    
      <category term="LeetCode" scheme="http://eugeneyang.com/tags/LeetCode/"/>
    
      <category term="java" scheme="http://eugeneyang.com/tags/java/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/categories/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Validate Binary Search Tree - 验证二叉搜索树]]></title>
    <link href="http://eugeneyang.com/2016/01/18/Validate%20Binary%20Search%20Tree%20-%20%E9%AA%8C%E8%AF%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
    <id>http://eugeneyang.com/2016/01/18/Validate Binary Search Tree - 验证二叉搜索树/</id>
    <published>2016-01-18T12:44:47.000Z</published>
    <updated>2016-01-19T12:45:33.029Z</updated>
    <content type="html"><![CDATA[<h3 id="Validate_Binary_Search_Tree_-_验证二叉搜索树">Validate Binary Search Tree - 验证二叉搜索树</h3><p><strong>Description</strong>: Given a binary tree, determine if it is a valid binary search tree (BST).<br> Assume a BST is defined as follows:<br> 1 The left subtree of a node contains only nodes with keys less than the node’s key.<br> 2 The right subtree of a node contains only nodes with keys greater than the node’s key.<br> 3 Both the left and right subtrees must also be binary search trees.</p>
<p> 思路：递归。类似二叉树的中序遍历。</p>
<p>参考：<a href="http://www.programcreek.com/2012/12/leetcode-validate-binary-search-tree-java/" target="_blank" rel="external">http://www.programcreek.com/2012/12/leetcode-validate-binary-search-tree-java/</a></p>
<p>完整的java代码如下（给出两种递归方式）：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidateBinarySearchTree</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"*****RESULT*****"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Definition for a binary tree node.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> val;</span><br><span class="line">        TreeNode left;</span><br><span class="line">        TreeNode right;</span><br><span class="line">        TreeNode(<span class="keyword">int</span> x) &#123;</span><br><span class="line">            val = x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * http://www.programcreek.com/2012/12/leetcode-validate-binary-search-tree-java/</span><br><span class="line">     * <span class="doctag">@param</span> root</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidBST</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dfs(root, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">dfs</span><span class="params">(TreeNode root, <span class="keyword">double</span> min, <span class="keyword">double</span> max)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (min&gt;=root.val || root.val&gt;=max) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> dfs(root.left, min, root.val) &amp;&amp; dfs(root.right, root.val, max);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isValid = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">private</span> TreeNode pre = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">/**与上述方法时间复杂度一致</span><br><span class="line">     * 另一种递归思路,类似Recover Binary Search Tree</span><br><span class="line">     * 注意pre存的是中序次序的上一个节点</span><br><span class="line">     * <span class="doctag">@param</span> root</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidBST1</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        inOrder(root);</span><br><span class="line">        <span class="keyword">return</span> isValid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        inOrder(root.left);</span><br><span class="line">        <span class="keyword">if</span> (pre == <span class="keyword">null</span>) pre = root;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (pre.val &gt;= root.val)&#123;</span><br><span class="line">                isValid = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            pre = root;</span><br><span class="line">        &#125;</span><br><span class="line">        inOrder(root.right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Validate_Binary_Search_Tree_-_验证二叉搜索树">Validate Binary Search Tree - 验证二叉搜索树</h3><p><strong>Description</strong>: Given a binary tre]]>
    </summary>
    
      <category term="LeetCode" scheme="http://eugeneyang.com/tags/LeetCode/"/>
    
      <category term="java" scheme="http://eugeneyang.com/tags/java/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/categories/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Unique Binary Search Trees II - 唯一二叉搜索树 II]]></title>
    <link href="http://eugeneyang.com/2016/01/17/Unique%20Binary%20Search%20Trees%20II%20-%20%E5%94%AF%E4%B8%80%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%20II/"/>
    <id>http://eugeneyang.com/2016/01/17/Unique Binary Search Trees II - 唯一二叉搜索树 II/</id>
    <published>2016-01-17T12:44:47.000Z</published>
    <updated>2016-01-18T12:29:24.800Z</updated>
    <content type="html"><![CDATA[<h3 id="Unique_Binary_Search_Trees_II_-_唯一二叉搜索树_II">Unique Binary Search Trees II - 唯一二叉搜索树 II</h3><p><strong>Description</strong>: Given n, generate all structurally unique BST’s (binary search trees) that store values 1…n.</p>
<p>原题链接：<a href="https://leetcode.com/problems/unique-binary-search-trees-ii/" target="_blank" rel="external">https://leetcode.com/problems/unique-binary-search-trees-ii/</a></p>
<p> 思路：DP与回溯，在循环中进行递归，类似NQueens.</p>
<p>参考：<a href="http://www.programcreek.com/2014/05/leetcode-unique-binary-search-trees-ii-java/" target="_blank" rel="external">http://www.programcreek.com/2014/05/leetcode-unique-binary-search-trees-ii-java/</a></p>
<p>完整的java代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UniqueBinarySearchTreesII</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"*****RESULT*****"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//Definition for a binary tree node.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> val;</span><br><span class="line">        TreeNode left;</span><br><span class="line">        TreeNode right;</span><br><span class="line">        TreeNode(<span class="keyword">int</span> x) &#123;</span><br><span class="line">            val = x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * DP与回溯:在循环中进行递归,类似NQueens.</span><br><span class="line">     * <span class="doctag">@param</span> n</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;TreeNode&gt; <span class="title">generateTrees</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">return</span> generateTrees(<span class="number">1</span>, n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;TreeNode&gt; <span class="title">generateTrees</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        List&lt;TreeNode&gt; list = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (start &gt; end) &#123;  <span class="comment">//空节点</span></span><br><span class="line">            list.add(<span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt;= end; i++) &#123;</span><br><span class="line">            List&lt;TreeNode&gt; lefts = generateTrees(start, i - <span class="number">1</span>);</span><br><span class="line">            List&lt;TreeNode&gt; rights = generateTrees(i + <span class="number">1</span>, end);</span><br><span class="line">            <span class="keyword">for</span> (TreeNode left : lefts) &#123;</span><br><span class="line">                <span class="keyword">for</span> (TreeNode right : rights) &#123;</span><br><span class="line">                    TreeNode node = <span class="keyword">new</span> TreeNode(i);</span><br><span class="line">                    node.left = left;</span><br><span class="line">                    node.right = right;</span><br><span class="line">                    list.add(node);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Unique_Binary_Search_Trees_II_-_唯一二叉搜索树_II">Unique Binary Search Trees II - 唯一二叉搜索树 II</h3><p><strong>Description</strong>: Given n,]]>
    </summary>
    
      <category term="LeetCode" scheme="http://eugeneyang.com/tags/LeetCode/"/>
    
      <category term="java" scheme="http://eugeneyang.com/tags/java/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/categories/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Unique Binary Search Trees - 唯一二叉搜索树]]></title>
    <link href="http://eugeneyang.com/2016/01/16/Unique%20Binary%20Search%20Trees%20-%20%E5%94%AF%E4%B8%80%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
    <id>http://eugeneyang.com/2016/01/16/Unique Binary Search Trees - 唯一二叉搜索树/</id>
    <published>2016-01-16T12:44:47.000Z</published>
    <updated>2016-01-18T12:29:24.798Z</updated>
    <content type="html"><![CDATA[<h3 id="Unique_Binary_Search_Trees_-_唯一二叉搜索树">Unique Binary Search Trees - 唯一二叉搜索树</h3><p><strong>Description</strong>: Given n, how many structurally unique BST’s (binary search trees) that store values 1…n?</p>
<p>For example,<br> Given n = 3, there are a total of 5 unique BST’s.</p>
<p>规律：基于以下原则的BST建树具有唯一性：</p>
<blockquote>
<p>以i为根节点的树，其左子树由[0, i-1]构成， 其右子树由[i+1, n]构成。</p>
<p> 思路：<br> 一维动态规划：二叉查找树可以任意取根，只要满足中序遍历有序的要求就可以。从处理子问题的角度来看，选取一个结点为根，就把结点切成左右子树，以这个结点为根的可行二叉树数量就是左右子树可行二叉树数量的乘积，所以总的数量是将以所有结点为根的可行结果累加起来。<br>     i=0, count[0]=1 //empty tree<br>     i=1, count[1]=1 //one tree<br>     i=2, count[2]=count[0]<em>count[1] // 1 is root<br>　　　　　+ count[1]</em>count[0] // 2 is root<br>     Count[i] = ∑ Count[0…k] * [ k+1….i], 0&lt;=k&lt;=i-1 (卡特兰数)</p>
</blockquote>
<p>复杂度：时间上每次求解i个结点的二叉查找树数量的需要一个i步的循环，总体要求n次，所以总时间复杂度是O(1+2+…+n)=O(n^2)。<br>空间上需要一个数组来维护，并且需要前i个的所有信息，所以是O(n)。</p>
<p>参考：<a href="http://fisherlei.blogspot.in/2013/03/leetcode-unique-binary-search-trees.html" target="_blank" rel="external">http://fisherlei.blogspot.in/2013/03/leetcode-unique-binary-search-trees.html</a></p>
<p>完整的java代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UniqueBinarySearchTrees</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"*****RESULT*****"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**参考 http://fisherlei.blogspot.in/2013/03/leetcode-unique-binary-search-trees.html</span><br><span class="line">     * 基于以下原则的BST建树具有唯一性：</span><br><span class="line">     以i为根节点的树，其左子树由[0, i-1]构成， 其右子树由[i+1, n]构成。</span><br><span class="line">     * 一维动态规划:二叉查找树可以任意取根，只要满足中序遍历有序的要求就可以。</span><br><span class="line">     从处理子问题的角度来看，选取一个结点为根，就把结点切成左右子树，</span><br><span class="line">     以这个结点为根的可行二叉树数量就是左右子树可行二叉树数量的乘积，</span><br><span class="line">     所以总的数量是将以所有结点为根的可行结果累加起来。</span><br><span class="line">     i=0, count[0]=1 //empty tree</span><br><span class="line">     i=1, count[1]=1 //one tree</span><br><span class="line">     i=2, count[2]=count[0]*count[1] // 1 is root</span><br><span class="line">                + count[1]*count[0] // 2 is root</span><br><span class="line">     Count[i] = ∑ Count[0...k] * [ k+1....i], 0&lt;=k&lt;=i-1 (卡特兰数)</span><br><span class="line">     * 时间上每次求解i个结点的二叉查找树数量的需要一个i步的循环，总体要求n次，</span><br><span class="line">     所以总时间复杂度是O(1+2+...+n)=O(n^2)。</span><br><span class="line">     空间上需要一个数组来维护，并且需要前i个的所有信息，所以是O(n)。</span><br><span class="line">     * <span class="doctag">@param</span> n</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numTrees</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] count = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        count[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        count[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;=i-<span class="number">1</span>; k++)</span><br><span class="line">                count[i] += count[k] * count[i-k-<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count[n];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Unique_Binary_Search_Trees_-_唯一二叉搜索树">Unique Binary Search Trees - 唯一二叉搜索树</h3><p><strong>Description</strong>: Given n, how many st]]>
    </summary>
    
      <category term="LeetCode" scheme="http://eugeneyang.com/tags/LeetCode/"/>
    
      <category term="java" scheme="http://eugeneyang.com/tags/java/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/categories/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Binary Tree Inorder Traversal - 二叉树中序遍历]]></title>
    <link href="http://eugeneyang.com/2016/01/15/Binary%20Tree%20Inorder%20Traversal%20-%20%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    <id>http://eugeneyang.com/2016/01/15/Binary Tree Inorder Traversal - 二叉树中序遍历/</id>
    <published>2016-01-15T12:44:47.000Z</published>
    <updated>2016-01-16T03:55:19.214Z</updated>
    <content type="html"><![CDATA[<h3 id="Binary_Tree_Inorder_Traversal_-_二叉树中序遍历">Binary Tree Inorder Traversal - 二叉树中序遍历</h3><p><strong>Description</strong>: Given a binary tree, return the inorder traversal of its nodes’ values.</p>
<p>For example:<br> Given binary tree {1,#,2,3},<br> 1<br>　\<br>  　　2<br> 　 /<br> 3<br> return [1,3,2].</p>
<p> Note: Recursive solution is trivial, could you do it iteratively?</p>
<p>思路：<br>递归：中序遍历左+访问根节点+中序遍历右；<br>迭代：从根节点开始入栈，只要存在左节点就一直入栈；不存在左节点就出栈访问节点值，然后继续遍历出栈那个节点的右节点。</p>
<p>完整的java代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BinaryTreeInorderTraversal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"*****RESULT*****"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//Definition for a binary tree node.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> val;</span><br><span class="line">        TreeNode left;</span><br><span class="line">        TreeNode right;</span><br><span class="line">        TreeNode(<span class="keyword">int</span> x) &#123; val = x; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     *递归:中序遍历左+访问根节点+中序遍历右</span><br><span class="line">     * <span class="doctag">@param</span> root</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        inorderTraversalHelper(root, result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">inorderTraversalHelper</span><span class="params">(TreeNode root, List&lt;Integer&gt; result)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        inorderTraversalHelper(root.left, result);</span><br><span class="line">        result.add(root.val);</span><br><span class="line">        inorderTraversalHelper(root.right, result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 迭代:从根节点开始入栈，只要存在左节点就一直入栈;</span><br><span class="line">     * 不存在左节点就出栈访问节点值，然后继续遍历出栈那个节点的右节点。</span><br><span class="line">     * <span class="doctag">@param</span> root</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">inorderTraversal1</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack();</span><br><span class="line">        TreeNode node = root;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span> (node != <span class="keyword">null</span>)&#123;</span><br><span class="line">                stack.push(node);</span><br><span class="line">                node = node.left;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (stack.isEmpty()) <span class="keyword">break</span>;</span><br><span class="line">            node = stack.pop();</span><br><span class="line">            result.add(node.val);</span><br><span class="line">            node = node.right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Binary_Tree_Inorder_Traversal_-_二叉树中序遍历">Binary Tree Inorder Traversal - 二叉树中序遍历</h3><p><strong>Description</strong>: Given a binary]]>
    </summary>
    
      <category term="LeetCode" scheme="http://eugeneyang.com/tags/LeetCode/"/>
    
      <category term="java" scheme="http://eugeneyang.com/tags/java/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/categories/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Restore IP Addresses - 重建IP地址]]></title>
    <link href="http://eugeneyang.com/2016/01/14/Restore%20IP%20Addresses%20-%20%E9%87%8D%E5%BB%BAIP%E5%9C%B0%E5%9D%80/"/>
    <id>http://eugeneyang.com/2016/01/14/Restore IP Addresses - 重建IP地址/</id>
    <published>2016-01-14T12:44:47.000Z</published>
    <updated>2016-01-14T13:14:46.913Z</updated>
    <content type="html"><![CDATA[<h3 id="Restore_IP_Addresses_-_重建IP地址">Restore IP Addresses - 重建IP地址</h3><p><strong>Description</strong>: Given a string containing only digits, restore it by returning all possible valid IP address combinations.</p>
<p> For example:<br> Given “25525511135”,<br> return [“255.255.11.135”, “255.255.111.35”]. (Order does not matter)</p>
<p>思路：回溯法。一个有效的IP地址由4个数字组成，每个数字在0-255之间。对于其中的2位数或3位数，不能以0开头。所以对于以s[i]开头的数字有3种可能：</p>
<pre><code><span class="number">1.</span> 一位s[i]；
<span class="number">2.</span> 两位s[i:i+<span class="number">1</span>]，s[i]!=<span class="number">0</span>时；
<span class="number">3.</span> 三位s[i:i+<span class="number">2</span>]，s[i]!=<span class="number">0</span>，且s[i : i+<span class="number">2</span>] &lt;= <span class="number">255</span>；
根据以上规律，对s从头开始进行DFS寻找<span class="number">4</span>个数字即可。
</code></pre><p>参考：<a href="http://bangbingsyb.blogspot.com/2014/11/leetcode-restore-ip-addresses.html" target="_blank" rel="external">http://bangbingsyb.blogspot.com/2014/11/leetcode-restore-ip-addresses.html</a></p>
<p>下面的判定方法对开头涉及0的、有范围限制的数值类型值有一定通用性（Decode Ways中也可以使用），值得借鉴：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.charAt(<span class="number">0</span>) == <span class="string">'0'</span>)</span><br><span class="line">            <span class="keyword">return</span> s.equals(<span class="string">"0"</span>); <span class="comment">// to eliminate cases like "00", "10"</span></span><br><span class="line">        <span class="keyword">int</span> digit = Integer.valueOf(s);</span><br><span class="line">        <span class="keyword">return</span> digit &gt;= <span class="number">0</span> &amp;&amp; digit &lt;= <span class="number">255</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>完整的java代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestoreIPAddresses</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"*****RESULT*****"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**参考：http://bangbingsyb.blogspot.com/2014/11/leetcode-restore-ip-addresses.html</span><br><span class="line">     * 回溯法：一个有效的IP地址由4个数字组成，每个数字在0-255之间。对于其中的2位数或3位数，不能以0开头。</span><br><span class="line">     所以对于以s[i]开头的数字有3种可能：</span><br><span class="line">     1. 一位s[i]；</span><br><span class="line">     2. 两位s[i:i+1]，s[i]!=0时；</span><br><span class="line">     3. 三位s[i:i+2]，s[i]!=0，且s[i : i+2] &lt;= 255；</span><br><span class="line">     根据以上规律，对s从头开始进行DFS寻找4个数字即可。</span><br><span class="line">     * <span class="doctag">@param</span> s</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">restoreIpAddresses</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        dfs(result, list, s, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(List&lt;String&gt; result, List&lt;String&gt; list, String s, <span class="keyword">int</span> start)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(list.size() == <span class="number">4</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(start != s.length()) <span class="keyword">return</span>;</span><br><span class="line">            StringBuilder builder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=<span class="number">2</span>; i++)&#123;</span><br><span class="line">                builder.append(list.get(i));</span><br><span class="line">                builder.append(<span class="string">"."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            builder.append(list.get(<span class="number">3</span>));</span><br><span class="line">            result.add(builder.toString());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=start; i&lt;s.length() &amp;&amp; i&lt;start+<span class="number">3</span>; i++)&#123;</span><br><span class="line">            String tmp = s.substring(start, i+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(isValid(tmp))&#123;</span><br><span class="line">                list.add(tmp);</span><br><span class="line">                dfs(result, list, s, i+<span class="number">1</span>);</span><br><span class="line">                list.remove(list.size()-<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 非常简洁的判定方法，注意学习</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.charAt(<span class="number">0</span>) == <span class="string">'0'</span>)</span><br><span class="line">            <span class="keyword">return</span> s.equals(<span class="string">"0"</span>); <span class="comment">// to eliminate cases like "00", "10"</span></span><br><span class="line">        <span class="keyword">int</span> digit = Integer.valueOf(s);</span><br><span class="line">        <span class="keyword">return</span> digit &gt;= <span class="number">0</span> &amp;&amp; digit &lt;= <span class="number">255</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Restore_IP_Addresses_-_重建IP地址">Restore IP Addresses - 重建IP地址</h3><p><strong>Description</strong>: Given a string containing only dig]]>
    </summary>
    
      <category term="LeetCode" scheme="http://eugeneyang.com/tags/LeetCode/"/>
    
      <category term="java" scheme="http://eugeneyang.com/tags/java/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/categories/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Reverse Linked List II - 逆转链表]]></title>
    <link href="http://eugeneyang.com/2016/01/13/Reverse%20Linked%20List%20II%20-%20%E9%80%86%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
    <id>http://eugeneyang.com/2016/01/13/Reverse Linked List II - 逆转链表/</id>
    <published>2016-01-13T12:44:47.000Z</published>
    <updated>2016-01-13T05:10:12.576Z</updated>
    <content type="html"><![CDATA[<h3 id="Reverse_Linked_List_II_-_逆转链表">Reverse Linked List II - 逆转链表</h3><p><strong>Description</strong>: Reverse a linked list from position m to n. Do it in-place and in one-pass.</p>
<p> For example:<br> Given 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL, m = 2 and n = 4,<br> return 1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;NULL.</p>
<p> Note:<br> Given m, n satisfy the following condition: 1 ≤ m ≤ n ≤ length of list.</p>
<p>思路：与Reverse Nodes In K Group思路类似。</p>
<p>完整的java代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReverseLinkedListII</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"*****RESULT*****"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Definition for singly-linked list.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> val;</span><br><span class="line">        ListNode next;</span><br><span class="line">        ListNode(<span class="keyword">int</span> x) &#123; val = x; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 与Reverse Nodes In K Group思路类似，</span><br><span class="line">     * Reverse a link list between pre and next exclusively</span><br><span class="line">     * a linked list:</span><br><span class="line">     * 0-&gt;1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6</span><br><span class="line">     * |           |</span><br><span class="line">     * pre        next</span><br><span class="line">     * after call pre = reverse(pre, next)</span><br><span class="line">     * 0-&gt;3-&gt;2-&gt;1-&gt;4-&gt;5-&gt;6</span><br><span class="line">     *          |  |</span><br><span class="line">     *          pre next</span><br><span class="line">     * <span class="doctag">@param</span> head</span><br><span class="line">     * <span class="doctag">@param</span> m</span><br><span class="line">     * <span class="doctag">@param</span> n</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseBetween</span><span class="params">(ListNode head, <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        ListNode dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>);   <span class="comment">//因为有“放到链表首位”的操作，需要一个dummy的头节点</span></span><br><span class="line">        dummy.next = head;</span><br><span class="line">        ListNode pre = <span class="keyword">null</span>;</span><br><span class="line">        ListNode cur = dummy;</span><br><span class="line">        ListNode last = <span class="keyword">null</span>;   <span class="comment">//where first will be doomed "last"</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt;= n)&#123;</span><br><span class="line">            <span class="keyword">if</span> (i == m-<span class="number">1</span>)&#123;  <span class="comment">//逆转开始</span></span><br><span class="line">                pre = cur;</span><br><span class="line">                last = pre.next;</span><br><span class="line">                cur = last.next;</span><br><span class="line">                i+=<span class="number">2</span>;</span><br><span class="line">                <span class="keyword">while</span> (i &lt;= n)&#123;</span><br><span class="line">                    last.next = cur.next;</span><br><span class="line">                    cur.next = pre.next;</span><br><span class="line">                    pre.next = cur;</span><br><span class="line">                    cur = last.next;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Reverse_Linked_List_II_-_逆转链表">Reverse Linked List II - 逆转链表</h3><p><strong>Description</strong>: Reverse a linked list from positio]]>
    </summary>
    
      <category term="LeetCode" scheme="http://eugeneyang.com/tags/LeetCode/"/>
    
      <category term="java" scheme="http://eugeneyang.com/tags/java/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/categories/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Decode Ways - 解码方式]]></title>
    <link href="http://eugeneyang.com/2016/01/12/Decode%20Ways%20-%20%E8%A7%A3%E7%A0%81%E6%96%B9%E5%BC%8F/"/>
    <id>http://eugeneyang.com/2016/01/12/Decode Ways - 解码方式/</id>
    <published>2016-01-12T12:44:47.000Z</published>
    <updated>2016-01-12T08:15:05.752Z</updated>
    <content type="html"><![CDATA[<h3 id="Decode_Ways_-_解码方式">Decode Ways - 解码方式</h3><p><strong>Description</strong>: A message containing letters from A-Z is being encoded to numbers using the following mapping:<br> ‘A’ -&gt; 1 ‘B’ -&gt; 2 … ‘Z’ -&gt; 26<br>Given an encoded message containing digits, determine the total number of ways to decode it.</p>
<p>For example,<br> Given encoded message “12”, it could be decoded as “AB” (1 2) or “L” (12).<br> The number of ways decoding “12” is 2.</p>
<p>思路：动态规划（类似Climbing Stairs问题，注意题目的输入是合法的encode，无需考虑不合法编码）：<br>对于当前位i(number数组头部额外分配一个)，考察前两位i-1, i-2：<br>递推式number[i] = number[i-1] + number[i-2]，但有以下限制：</p>
<ol>
<li>s[i-1]!=0，否则number[i]=number[i-2]；</li>
<li>在s[i-1]!=0基础上，s[i-2]!=0 &amp;&amp; (1&lt;=s[i-2,i-1]&lt;=26)，否则number[i]=number[i-1]。</li>
</ol>
<p>参考：<a href="http://blog.csdn.net/worldwindjp/article/details/19938131" target="_blank" rel="external">http://blog.csdn.net/worldwindjp/article/details/19938131</a></p>
<p>完整的java代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DecodeWays</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"*****RESULT*****"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 动态规划（类似Climbing Stairs问题，注意题目的输入是合法的encode，无需考虑不合法编码）：</span><br><span class="line">     * 对于当前位i(number数组头部额外分配一个)，考察前两位i-1, i-2：</span><br><span class="line">       递推式number[i] = number[i-1] + number[i-2]，但有以下限制：</span><br><span class="line">       1. s[i-1]!=0，否则number[i]=number[i-2]；</span><br><span class="line">       2. 在s[i-1]!=0基础上，s[i-2]!=0 &amp;&amp; (1&lt;=s[i-2,i-1]&lt;=26)，否则number[i]=number[i-1]。</span><br><span class="line">     * 参考：http://blog.csdn.net/worldwindjp/article/details/19938131</span><br><span class="line">     * <span class="doctag">@param</span> s</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numDecodings</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s==<span class="keyword">null</span> || s.length()==<span class="number">0</span> || s.charAt(<span class="number">0</span>)==<span class="string">'0'</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] number = <span class="keyword">new</span> <span class="keyword">int</span>[s.length()+<span class="number">1</span>];   <span class="comment">//额外分配一个</span></span><br><span class="line">        number[<span class="number">0</span>] = number[<span class="number">1</span>] = <span class="number">1</span>;  <span class="comment">//额外分配的number[0]存初始值，i从1开始</span></span><br><span class="line">        <span class="keyword">int</span> temp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=s.length(); i++)&#123;</span><br><span class="line">            temp = Integer.parseInt(s.substring(i-<span class="number">1</span>, i));</span><br><span class="line">            <span class="keyword">if</span> (temp != <span class="number">0</span>) number[i] = number[i-<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(i-<span class="number">2</span>) != <span class="string">'0'</span>) &#123;</span><br><span class="line">                temp = Integer.parseInt(s.substring(i-<span class="number">2</span>, i));</span><br><span class="line">                <span class="keyword">if</span> (<span class="number">1</span>&lt;=temp &amp;&amp; temp&lt;=<span class="number">26</span>) number[i] += number[i-<span class="number">2</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> number[s.length()];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Decode_Ways_-_解码方式">Decode Ways - 解码方式</h3><p><strong>Description</strong>: A message containing letters from A-Z is being encoded t]]>
    </summary>
    
      <category term="LeetCode" scheme="http://eugeneyang.com/tags/LeetCode/"/>
    
      <category term="java" scheme="http://eugeneyang.com/tags/java/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/categories/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Subsets II - 求子集 II]]></title>
    <link href="http://eugeneyang.com/2016/01/11/Subsets%20II%20-%20%E6%B1%82%E5%AD%90%E9%9B%86%20II/"/>
    <id>http://eugeneyang.com/2016/01/11/Subsets II - 求子集 II/</id>
    <published>2016-01-11T12:44:47.000Z</published>
    <updated>2016-01-11T11:00:40.174Z</updated>
    <content type="html"><![CDATA[<h3 id="Subsets_II_-_求子集_II">Subsets II - 求子集 II</h3><p><strong>Description</strong>: Given a collection of integers that might contain duplicates, nums, return all possible subsets.</p>
<p>Note:<br> Elements in a subset must be in non-descending order.<br> The solution set must not contain duplicate subsets.</p>
<p> For example,<br> If nums = [1,2,2], a solution is:<br> [ [2], [1], [1,2,2], [2,2], [1,2], [] ]</p>
<p>方法一：位图法，与Subsets位图法思路一致，再添加判重部分即可。</p>
<p>方法二：回溯法，与Subsets回溯法思路一致，回溯时跳过重复数字即可。效率最高。<br>参考：<a href="http://bangbingsyb.blogspot.com/2014/11/leetcode-subsets-i-ii.html" target="_blank" rel="external">http://bangbingsyb.blogspot.com/2014/11/leetcode-subsets-i-ii.html</a></p>
<p>方法三：在原集合上添加数字构建子集的方法，与Subsets这种思路也一致，多了判重部分。效率次高。<br>参考：<a href="http://www.programcreek.com/2013/01/leetcode-subsets-ii-java/" target="_blank" rel="external">http://www.programcreek.com/2013/01/leetcode-subsets-ii-java/</a></p>
<p>完整的java代码如下（含三种方法）：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubsetsII</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] nums = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">"*****RESULT*****"</span>);</span><br><span class="line">        <span class="comment">//法一</span></span><br><span class="line"><span class="comment">//        List&lt;List&lt;Integer&gt;&gt; res = new SubsetsII().subsetsWithDup(nums);</span></span><br><span class="line">        <span class="comment">//法二</span></span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> SubsetsII().subsetsWithDup1(nums);</span><br><span class="line">        <span class="comment">//输出</span></span><br><span class="line">        <span class="keyword">for</span> (List&lt;Integer&gt; ints : res)&#123;</span><br><span class="line">            <span class="keyword">for</span> (Integer i : ints) System.out.print(i + <span class="string">" "</span>);</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 位图法：与Subsets位图法思路一致，再添加判重部分即可</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; subsetsWithDup(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;Integer&gt; temp;</span><br><span class="line">        <span class="keyword">int</span> len = nums.length;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">1</span> &lt;&lt; len;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            temp = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="comment">//查看第一层循环任意一种取值中哪一位是1；如果是1，对应的字符就存在</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">1</span>; k&lt;=len; k++)&#123;</span><br><span class="line">                <span class="keyword">if</span> ( (i&amp;(<span class="number">1</span> &lt;&lt; k-<span class="number">1</span>)) != <span class="number">0</span> ) temp.add(nums[k-<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!result.contains(temp)) <span class="comment">//判重</span></span><br><span class="line">                result.add(<span class="keyword">new</span> ArrayList&lt;&gt;(temp));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 回溯法</span><br><span class="line">     * 参考：http://bangbingsyb.blogspot.com/2014/11/leetcode-subsets-i-ii.html</span><br><span class="line">     * <span class="doctag">@param</span> nums</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; subsetsWithDup1(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;Integer&gt; sol = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        result.add(<span class="keyword">new</span> ArrayList&lt;&gt;(sol));   <span class="comment">//额外添加空集</span></span><br><span class="line">        backTrack(nums, <span class="number">0</span>, result, sol);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">backTrack</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> start, List&lt;List&lt;Integer&gt;&gt; result, List&lt;Integer&gt; sol)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=start; i&lt;nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i&gt;start &amp;&amp; nums[i]==nums[i-<span class="number">1</span>]) <span class="keyword">continue</span>;    <span class="comment">//跳过再次重复的数字</span></span><br><span class="line">            sol.add(nums[i]);</span><br><span class="line">            result.add(<span class="keyword">new</span> ArrayList&lt;&gt;(sol));</span><br><span class="line">            backTrack(nums, i+<span class="number">1</span>, result, sol);</span><br><span class="line">            sol.remove(sol.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在原集合上添加数字构建子集的方法，参考http://www.programcreek.com/2013/01/leetcode-subsets-ii-java/</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; subsetsWithDup2(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; prev = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = nums.length-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="comment">//get existing sets</span></span><br><span class="line">            <span class="keyword">if</span> (i == nums.length - <span class="number">1</span> || nums[i] != nums[i + <span class="number">1</span>] || prev.size() == <span class="number">0</span>) &#123;</span><br><span class="line">                prev = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; result.size(); j++) &#123;</span><br><span class="line">                    prev.add(<span class="keyword">new</span> ArrayList&lt;&gt;(result.get(j)));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//add current number to each element of the set</span></span><br><span class="line">            <span class="keyword">for</span> (List&lt;Integer&gt; temp : prev) &#123;</span><br><span class="line">                temp.add(<span class="number">0</span>, nums[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//add each single number as a set, only if current element is different with previous</span></span><br><span class="line">            <span class="keyword">if</span> (i == nums.length - <span class="number">1</span> || nums[i] != nums[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                ArrayList&lt;Integer&gt; temp = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                temp.add(nums[i]);</span><br><span class="line">                prev.add(temp);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//add all set created in this iteration</span></span><br><span class="line">            <span class="keyword">for</span> (List&lt;Integer&gt; temp : prev) &#123;</span><br><span class="line">                result.add(<span class="keyword">new</span> ArrayList&lt;&gt;(temp));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//add empty set</span></span><br><span class="line">        result.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Subsets_II_-_求子集_II">Subsets II - 求子集 II</h3><p><strong>Description</strong>: Given a collection of integers that might contain dupl]]>
    </summary>
    
      <category term="LeetCode" scheme="http://eugeneyang.com/tags/LeetCode/"/>
    
      <category term="java" scheme="http://eugeneyang.com/tags/java/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/categories/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Gray Code - 格雷码]]></title>
    <link href="http://eugeneyang.com/2016/01/10/Gray%20Code%20-%20%E6%A0%BC%E9%9B%B7%E7%A0%81/"/>
    <id>http://eugeneyang.com/2016/01/10/Gray Code - 格雷码/</id>
    <published>2016-01-10T12:44:47.000Z</published>
    <updated>2016-01-10T11:00:09.363Z</updated>
    <content type="html"><![CDATA[<h3 id="Gray_Code_-_格雷码">Gray Code - 格雷码</h3><p><strong>Description</strong>: The gray code is a binary numeral system where two successive values differ in only one bit.</p>
<p>Given a non-negative integer n representing the total number of bits in the code, print the sequence of gray code. A gray code sequence must begin with 0.</p>
<p> For example, given n = 2, return [0,1,3,2].</p>
<p>注意：格雷码是唯一的（如果每次只是与上一个数有一个位不同的话，则会有很多种组合结果）。因此另一种解法是数学解：第i个数可以由如下公式产生，(i&gt;&gt;1)^i。</p>
<p>这里主要讨论递归法。<br>规律：n位格雷码的前一半是：n-1位的所有格雷码；而后一半是：前一半逆序后，均加上2^(n-1)。<br>示例：n=3: 000, 001, 011, 010 | 110, 111, 101, 100 (0, 1, 3, 2 | 6, 7, 5, 4)</p>
<p>参考：<a href="http://fisherlei.blogspot.com/2012/12/leetcode-gray-code.html" target="_blank" rel="external">http://fisherlei.blogspot.com/2012/12/leetcode-gray-code.html</a></p>
<p>完整的java代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GrayCode</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"*****RESULT*****"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** http://fisherlei.blogspot.com/2012/12/leetcode-gray-code.html</span><br><span class="line">     * 注意：格雷码是唯一的（如果每次只是与上一个数有一个位不同的话，则会有很多种组合结果）。</span><br><span class="line">     因此另一种解法是数学解：第i个数可以由如下公式产生，(i&gt;&gt;1)^i。</span><br><span class="line">     * 递归法：</span><br><span class="line">     * 规律：n位格雷码的前一半是：n-1位的所有格雷码；而后一半是：前一半逆序后，均加上2^(n-1)。</span><br><span class="line">     * 示例：n=3: 000, 001, 011, 010 | 110, 111, 101, 100 (0, 1, 3, 2 | 6, 7, 5, 4)</span><br><span class="line">     * <span class="doctag">@param</span> n</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">grayCode</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>)&#123;</span><br><span class="line">            result.add(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        result = grayCode(n-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> adds = <span class="number">1</span> &lt;&lt; (n-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> size = result.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=size-<span class="number">1</span>; i&gt;=<span class="number">0</span>; i--)&#123;</span><br><span class="line">            result.add(result.get(i) + adds);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Gray_Code_-_格雷码">Gray Code - 格雷码</h3><p><strong>Description</strong>: The gray code is a binary numeral system where two successive ]]>
    </summary>
    
      <category term="LeetCode" scheme="http://eugeneyang.com/tags/LeetCode/"/>
    
      <category term="java" scheme="http://eugeneyang.com/tags/java/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/categories/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Merge Sorted Array - 合并有序数组]]></title>
    <link href="http://eugeneyang.com/2016/01/09/Merge%20Sorted%20Array%20-%20%E5%90%88%E5%B9%B6%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/"/>
    <id>http://eugeneyang.com/2016/01/09/Merge Sorted Array - 合并有序数组/</id>
    <published>2016-01-09T12:44:47.000Z</published>
    <updated>2016-01-09T07:09:39.332Z</updated>
    <content type="html"><![CDATA[<h3 id="Merge_Sorted_Array_-_合并有序数组">Merge Sorted Array - 合并有序数组</h3><p><strong>Description</strong>: Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.</p>
<p>Note: You may assume that nums1 has enough space (size that is greater or equal to m + n) to hold additional elements from nums2. The number of elements initialized in nums1 and nums2 are m and n respectively.</p>
<p>思路：双指针遍历。</p>
<p>完整的java代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeSortedArray</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"*****RESULT*****"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span> m, <span class="keyword">int</span>[] nums2, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] num1Copy = Arrays.copyOf(nums1, m);</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>, j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;m)&#123;</span><br><span class="line">            <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span> (num1Copy[i] &lt; nums2[j])&#123;</span><br><span class="line">                nums1[i+j] = num1Copy[i];</span><br><span class="line">                i++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                nums1[i+j] = nums2[j];</span><br><span class="line">                j++;</span><br><span class="line">                <span class="keyword">if</span> (!(j&lt;n)) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (i&lt;m)&#123;</span><br><span class="line">            nums1[i+j] = num1Copy[i];</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (j&lt;n)&#123;</span><br><span class="line">            nums1[i+j] = nums2[j];</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Merge_Sorted_Array_-_合并有序数组">Merge Sorted Array - 合并有序数组</h3><p><strong>Description</strong>: Given two sorted integer arrays nums1 ]]>
    </summary>
    
      <category term="LeetCode" scheme="http://eugeneyang.com/tags/LeetCode/"/>
    
      <category term="java" scheme="http://eugeneyang.com/tags/java/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/categories/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Scramble String - 字符串重组]]></title>
    <link href="http://eugeneyang.com/2016/01/08/Scramble%20String%20-%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%87%8D%E7%BB%84/"/>
    <id>http://eugeneyang.com/2016/01/08/Scramble String - 字符串重组/</id>
    <published>2016-01-08T12:44:47.000Z</published>
    <updated>2016-01-08T07:05:21.834Z</updated>
    <content type="html"><![CDATA[<h3 id="Scramble_String_-_字符串重组">Scramble String - 字符串重组</h3><p><strong>Description</strong>: Given a string s1, we may represent it as a binary tree by partitioning it to two non-empty substrings recursively. Given two strings s1 and s2 of the same length, determine if s2 is a scrambled string of s1.</p>
<p>原题链接：<a href="https://leetcode.com/problems/scramble-string/" target="_blank" rel="external">https://leetcode.com/problems/scramble-string/</a></p>
<p>题解：<br>方法一：递归解法：时间复杂度最差为O(3^n)，要通过OJ需要加上剪枝条件：把两个字符串的字符排序后，然后比较是否相同。</p>
<p>方法二：三维动态规划解法：提出维护量res[i][j][n]，其中i是s1的起始字符，j是s2的起始字符，而n是当前的字符串长度，res[i][j][len]表示的是以i和j分别为s1和s2起点的长度为len的字符串是不是互为scramble。</p>
<p>递推式：首先是把当前s1[i…i+len-1]字符串劈一刀分成两部分，然后分两种情况：<br>第一种是左边和s2[j…j+len-1]左边部分是不是scramble，以及右边和s2[j…j+len-1]右边部分是不是scramble；<br>第二种情况是左边和s2[j…j+len-1]右边部分是不是scramble，以及右边和s2[j…j+len-1]左边部分是不是scramble。<br>如果以上两种情况有一种成立，说明s1[i…i+len-1]和s2[j…j+len-1]是scramble的。<br>上面说的是劈一刀的情况，对于s1[i…i+len-1]我们有len-1种劈法，在这些劈法中只要有一种成立，那么两个串就是scramble的。</p>
<p>总结：res[i][j][len] |= (res[i][j][k]&amp;&amp;res[i+k][j+k][len-k] || res[i][j+len-k][k]&amp;&amp;res[i+k][j][len-k]),1&lt;=k&lt;len，也就是对于所有len-1种劈法的结果求或运算。</p>
<p>复杂度：因为信息都是计算过的，对于每种劈法只需要常量操作，因此求解递推式需要线性时间（因为len-1种劈法）。如此总时间复杂度因为是三维动态规划需要三层循环，加上每一步需要线行时间求解递推式，所以是O(n\^4)。空间复杂度是O(n\^3)。</p>
<p>参考：<a href="http://blog.csdn.net/fightforyourdream/article/details/17707187" target="_blank" rel="external">http://blog.csdn.net/fightforyourdream/article/details/17707187</a></p>
<p>完整的java代码如下（不包括方法一）：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScrambleString</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"*****RESULT*****"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * http://blog.csdn.net/fightforyourdream/article/details/17707187</span><br><span class="line">     * 递归解法：时间复杂度最差为O(3^n)，要通过OJ需要加上剪枝条件：把两个字符串的字符排序后，然后比较是否相同。</span><br><span class="line">     * 三维动态规划解法：提出维护量res[i][j][n]，其中i是s1的起始字符，j是s2的起始字符，而n是当前的字符串长度，</span><br><span class="line">      res[i][j][len]表示的是以i和j分别为s1和s2起点的长度为len的字符串是不是互为scramble。</span><br><span class="line">     * 递推式：首先是把当前s1[i...i+len-1]字符串劈一刀分成两部分，然后分两种情况：</span><br><span class="line">      第一种是左边和s2[j...j+len-1]左边部分是不是scramble，以及右边和s2[j...j+len-1]右边部分是不是scramble；</span><br><span class="line">      第二种情况是左边和s2[j...j+len-1]右边部分是不是scramble，以及右边和s2[j...j+len-1]左边部分是不是scramble。</span><br><span class="line">      如果以上两种情况有一种成立，说明s1[i...i+len-1]和s2[j...j+len-1]是scramble的。</span><br><span class="line">     上面说的是劈一刀的情况，对于s1[i...i+len-1]我们有len-1种劈法，在这些劈法中只要有一种成立，那么两个串就是scramble的。</span><br><span class="line">     总结：res[i][j][len] |= (res[i][j][k]&amp;&amp;res[i+k][j+k][len-k] || res[i][j+len-k][k]&amp;&amp;res[i+k][j][len-k]),1&lt;=k&lt;len，</span><br><span class="line">     也就是对于所有len-1种劈法的结果求或运算。</span><br><span class="line">     * 复杂度：因为信息都是计算过的，对于每种劈法只需要常量操作，因此求解递推式需要线性时间（因为len-1种劈法）。</span><br><span class="line">     如此总时间复杂度因为是三维动态规划需要三层循环，加上每一步需要线行时间求解递推式，所以是O(n^4)。空间复杂度是O(n^3)。</span><br><span class="line">     * <span class="doctag">@param</span> s1</span><br><span class="line">     * <span class="doctag">@param</span> s2</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isScramble</span><span class="params">(String s1, String s2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = s1.length();</span><br><span class="line">        <span class="keyword">if</span>(len != s2.length()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">boolean</span>[][][] canScramble = <span class="keyword">new</span> <span class="keyword">boolean</span>[len][len][len+<span class="number">1</span>];   <span class="comment">// i,j with sub length</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len; i++) &#123;  <span class="comment">// subLen=1</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;len; j++) &#123;</span><br><span class="line">                <span class="comment">// substring start from i with length 1, compared with substring start from j with length 1</span></span><br><span class="line">                canScramble[i][j][<span class="number">1</span>] = s1.charAt(i) == s2.charAt(j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> subLen=<span class="number">2</span>; subLen&lt;=len; subLen++) &#123;</span><br><span class="line">            <span class="comment">// (end_pos=i+subLen-1) &lt;= len-1, so i &lt;= len-subLen</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=len-subLen; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;=len-subLen; j++) &#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> p=<span class="number">1</span>; p&lt;subLen; p++) &#123;   <span class="comment">// split position</span></span><br><span class="line">                        canScramble[i][j][subLen] |= (canScramble[i][j][p] &amp;&amp; canScramble[i+p][j+p][subLen-p]) ||</span><br><span class="line">                                (canScramble[i][j+subLen-p][p] &amp;&amp; canScramble[i+p][j][subLen-p]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> canScramble[<span class="number">0</span>][<span class="number">0</span>][len];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Scramble_String_-_字符串重组">Scramble String - 字符串重组</h3><p><strong>Description</strong>: Given a string s1, we may represent it as a bi]]>
    </summary>
    
      <category term="LeetCode" scheme="http://eugeneyang.com/tags/LeetCode/"/>
    
      <category term="java" scheme="http://eugeneyang.com/tags/java/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/categories/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>

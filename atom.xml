<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Eugene's Blog]]></title>
  <subtitle><![CDATA[成长之旅]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://ernestyj.github.io/"/>
  <updated>2015-12-25T12:53:25.258Z</updated>
  <id>http://ernestyj.github.io/</id>
  
  <author>
    <name><![CDATA[Jian Yang]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Set Matrix Zeroes - 矩阵置零]]></title>
    <link href="http://ernestyj.github.io/2015/12/25/Set%20Matrix%20Zeroes%20-%20%E7%9F%A9%E9%98%B5%E7%BD%AE%E9%9B%B6/"/>
    <id>http://ernestyj.github.io/2015/12/25/Set Matrix Zeroes - 矩阵置零/</id>
    <published>2015-12-25T12:44:47.000Z</published>
    <updated>2015-12-25T12:53:25.258Z</updated>
    <content type="html"><![CDATA[<h3 id="Set_Matrix_Zeroes_-_矩阵置零">Set Matrix Zeroes - 矩阵置零</h3><p><strong>Description</strong>: Given a m x n matrix, if an element is 0, set its entire row and column to 0. Do it in place.</p>
<p>Could you devise a constant space solution?</p>
<p>O(1)解法：用第0行和第0列来记录第1~m-1行和第1~n-1列是否需要置0。而用两个变量记录第0行和第0列是否需要置0。</p>
<p>注意：直接用0来标记需要置零，不要使用其他标记，这样第0行、第0列可以不用额外处理。</p>
<p>完整的java代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SetMatrixZeroes</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        int[][] matrix = &#123; &#123;0,0,0,5&#125;,</span></span><br><span class="line"><span class="comment">//                            &#123;4,3,1,4&#125;,</span></span><br><span class="line"><span class="comment">//                            &#123;0,1,1,4&#125;,</span></span><br><span class="line"><span class="comment">//                            &#123;1,2,1,3&#125;,</span></span><br><span class="line"><span class="comment">//                            &#123;0,0,1,1&#125;&#125;;</span></span><br><span class="line">        <span class="keyword">int</span>[][] matrix = &#123; &#123;<span class="number">0</span>,<span class="number">1</span>&#125; &#125;;</span><br><span class="line">        System.out.println(<span class="string">"*****RESULT*****"</span>);</span><br><span class="line">        <span class="keyword">new</span> SetMatrixZeroes().setZeroes(matrix);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] row : matrix)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i : row) System.out.print(i + <span class="string">" "</span>);</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * O(1)解法：用第0行和第0列来记录第1~m-1行和第1~n-1列是否需要置0。</span><br><span class="line">     * 而用两个变量记录第0行和第0列是否需要置0。</span><br><span class="line">     * TODO 注意：直接用0来标记需要置零，不要使用其他标记，这样第0行、第0列可以不用额外处理。</span><br><span class="line">     * <span class="doctag">@param</span> matrix</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setZeroes</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = matrix.length, n = matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">int</span> zeroRow = <span class="number">1</span>, zeroCol = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> i, j, k;</span><br><span class="line">        <span class="comment">//set first row and column zero or not</span></span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;m; i++)</span><br><span class="line">            <span class="keyword">if</span> (matrix[i][<span class="number">0</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">                zeroCol = <span class="number">0</span>; <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">for</span> (j=<span class="number">0</span>; j&lt;n; j++)</span><br><span class="line">            <span class="keyword">if</span> (matrix[<span class="number">0</span>][j] == <span class="number">0</span>) &#123;</span><br><span class="line">                zeroRow = <span class="number">0</span>; <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="comment">//mark zeros on first row and column</span></span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;m; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (j=<span class="number">1</span>; j&lt;n; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (matrix[i][j] == <span class="number">0</span>)&#123;</span><br><span class="line">                    matrix[<span class="number">0</span>][j] = <span class="number">0</span>;</span><br><span class="line">                    matrix[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//set each elements by using marks in first row and column.</span></span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;m; i++)</span><br><span class="line">            <span class="keyword">if</span> (matrix[i][<span class="number">0</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (k=<span class="number">0</span>; k&lt;n; k++) matrix[i][k] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">for</span> (j=<span class="number">1</span>; j&lt;n; j++)</span><br><span class="line">            <span class="keyword">if</span> (matrix[<span class="number">0</span>][j] == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (k=<span class="number">0</span>; k&lt;m; k++) matrix[k][j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="comment">//Set first column and row by using marks in first step.</span></span><br><span class="line">        <span class="keyword">if</span> (zeroRow == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">for</span> (j=<span class="number">0</span>; j&lt;n; j++) matrix[<span class="number">0</span>][j] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (zeroCol == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;m; i++) matrix[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Set_Matrix_Zeroes_-_矩阵置零">Set Matrix Zeroes - 矩阵置零</h3><p><strong>Description</strong>: Given a m x n matrix, if an element is 0, se]]>
    </summary>
    
      <category term="LeetCode" scheme="http://ernestyj.github.io/tags/LeetCode/"/>
    
      <category term="java" scheme="http://ernestyj.github.io/tags/java/"/>
    
      <category term="算法" scheme="http://ernestyj.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法" scheme="http://ernestyj.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Edit Distance - 最短编辑距离]]></title>
    <link href="http://ernestyj.github.io/2015/12/24/Edit%20Distance%20-%20%E6%9C%80%E7%9F%AD%E7%BC%96%E8%BE%91%E8%B7%9D%E7%A6%BB/"/>
    <id>http://ernestyj.github.io/2015/12/24/Edit Distance - 最短编辑距离/</id>
    <published>2015-12-24T12:44:47.000Z</published>
    <updated>2015-12-24T08:00:39.169Z</updated>
    <content type="html"><![CDATA[<h3 id="Edit_Distance_-_最短编辑距离">Edit Distance - 最短编辑距离</h3><p><strong>Description</strong>: Given two words word1 and word2, find the minimum number of steps required to convert word1 to word2. (each operation is counted as 1 step.)<br> You have the following 3 operations permitted on a word:<br> a) Insert a character<br> b) Delete a character<br> c) Replace a character</p>
<p> 思路：使用动态规划。D[i,j]表示s1的前i个字符和 s2的前j个字符的最短编辑距离，<br>s1[i]!=s2[j]时，D[i,j]=min(D[i-1,j]+1,D[i,j-1]+1,D[i-1,j-1]+1);<br>s1[i]==s2[j]时，D[i,j]=D[i-1,j-1];</p>
<p> 参考：<a href="http://blog.unieagle.net/2012/09/19/leetcode%E9%A2%98%E7%9B%AE%EF%BC%9Aedit-distance%EF%BC%8C%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B9%8B%E9%97%B4%E7%9A%84%E7%BC%96%E8%BE%91%E8%B7%9D%E7%A6%BB%EF%BC%8C%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/" target="_blank" rel="external">http://blog.unieagle.net/2012/09/19/leetcode%E9%A2%98%E7%9B%AE%EF%BC%9Aedit-distance%EF%BC%8C%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B9%8B%E9%97%B4%E7%9A%84%E7%BC%96%E8%BE%91%E8%B7%9D%E7%A6%BB%EF%BC%8C%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</a></p>
<p>注意此题中置换也是一种基本操作，置换操作明显比 “删除+增加” 操作更短；<br>如果置换不是基本操作，则是另一种算法（可以参考：<a href="http://blog.csdn.net/abcjennifer/article/details/7735272" target="_blank" rel="external">http://blog.csdn.net/abcjennifer/article/details/7735272</a> ）。</p>
<p>完整的java代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EditDistance</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"*****RESULT*****"</span>);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> EditDistance().minDistance(<span class="string">"eat"</span>, <span class="string">"sea"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 参考：http://blog.unieagle.net/2012/09/19/leetcode%E9%A2%98%E7%9B%AE%EF%BC%9Aedit-distance%EF%BC%8C%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B9%8B%E9%97%B4%E7%9A%84%E7%BC%96%E8%BE%91%E8%B7%9D%E7%A6%BB%EF%BC%8C%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</span><br><span class="line">     * D[i,j]: s1的前i个字符和 s2的前j个字符的最短编辑距离</span><br><span class="line">     * 注意置换也是一种基本操作，置换明显比 删除+增加 操作更短；</span><br><span class="line">     * 如果置换不是基本操作，则是另一种算法（参考：http://blog.csdn.net/abcjennifer/article/details/7735272）。</span><br><span class="line">     * s1[i]!=s2[j]时，D[i,j]=min(D[i-1,j]+1,D[i,j-1]+1,D[i-1,j-1]+1);</span><br><span class="line">     * s1[i]==s2[j]时，D[i,j]=D[i-1,j-1];</span><br><span class="line">     * <span class="doctag">@param</span> word1</span><br><span class="line">     * <span class="doctag">@param</span> word2</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minDistance</span><span class="params">(String word1, String word2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (word1.equals(word2)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> m = word1.length(), n = word2.length();</span><br><span class="line">        <span class="keyword">int</span>[][] D = <span class="keyword">new</span> <span class="keyword">int</span>[m+<span class="number">1</span>][n+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//初始化</span></span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;=m; i++)</span><br><span class="line">            D[i][<span class="number">0</span>] = i;</span><br><span class="line">        <span class="keyword">for</span> (j=<span class="number">0</span>; j&lt;=n; j++)</span><br><span class="line">            D[<span class="number">0</span>][j] = j;</span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;=m; i++)</span><br><span class="line">            <span class="keyword">for</span> (j=<span class="number">1</span>; j&lt;=n; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (word1.charAt(i-<span class="number">1</span>) == word2.charAt(j-<span class="number">1</span>))</span><br><span class="line">                    D[i][j] = D[i-<span class="number">1</span>][j-<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">int</span> replace = D[i-<span class="number">1</span>][j-<span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">int</span> insert = D[i][j-<span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">int</span> delete = D[i-<span class="number">1</span>][j] + <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">int</span> temp = Math.min(replace, insert);</span><br><span class="line">                    D[i][j] = Math.min(temp, delete);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> D[m][n];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Edit_Distance_-_最短编辑距离">Edit Distance - 最短编辑距离</h3><p><strong>Description</strong>: Given two words word1 and word2, find the minimu]]>
    </summary>
    
      <category term="LeetCode" scheme="http://ernestyj.github.io/tags/LeetCode/"/>
    
      <category term="java" scheme="http://ernestyj.github.io/tags/java/"/>
    
      <category term="算法" scheme="http://ernestyj.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法" scheme="http://ernestyj.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Simplify Path - 路径简化]]></title>
    <link href="http://ernestyj.github.io/2015/12/23/Simplify%20Path%20-%20%E8%B7%AF%E5%BE%84%E7%AE%80%E5%8C%96/"/>
    <id>http://ernestyj.github.io/2015/12/23/Simplify Path - 路径简化/</id>
    <published>2015-12-23T12:44:47.000Z</published>
    <updated>2015-12-23T12:37:10.741Z</updated>
    <content type="html"><![CDATA[<h3 id="Simplify_Path_-_路径简化">Simplify Path - 路径简化</h3><p><strong>Description</strong>: Given an absolute path for a file (Unix-style), simplify it.</p>
<p> For example,<br> path = “/home/“, =&gt; “/home”<br> path = “/a/./b/../../c/“, =&gt; “/c”</p>
<p> 思路：先将输入用/分隔开得到字符数组，然后再分情况判断。算法过程使用到栈数据结构。</p>
<p>完整的java代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimplifyPath</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        String path = "/a/./b/../../c/";</span></span><br><span class="line"><span class="comment">//        String path = "/home/";</span></span><br><span class="line">        String path = <span class="string">"/home//foo/"</span>;</span><br><span class="line">        System.out.println(<span class="string">"*****RESULT*****"</span>);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> SimplifyPath().simplifyPath(path));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">simplifyPath</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">        String[] strings = path.split(<span class="string">"/"</span>);</span><br><span class="line">        Stack&lt;String&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;strings.length; i++)&#123;</span><br><span class="line">            String s = strings[i];</span><br><span class="line">            <span class="keyword">if</span> (s.length() != <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span> (s.equals(<span class="string">"."</span>))&#123;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span> (s.equals(<span class="string">".."</span>))&#123;</span><br><span class="line">                    <span class="keyword">if</span> (!stack.isEmpty()) stack.pop();</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    stack.push(strings[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (stack.isEmpty()) <span class="keyword">return</span> <span class="string">"/"</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            StringBuilder builder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            Object[] array = stack.toArray();</span><br><span class="line">            <span class="keyword">for</span> (Object o : array) builder.append(<span class="string">"/"</span> + o);</span><br><span class="line">            <span class="keyword">return</span> builder.toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Simplify_Path_-_路径简化">Simplify Path - 路径简化</h3><p><strong>Description</strong>: Given an absolute path for a file (Unix-style), simp]]>
    </summary>
    
      <category term="LeetCode" scheme="http://ernestyj.github.io/tags/LeetCode/"/>
    
      <category term="java" scheme="http://ernestyj.github.io/tags/java/"/>
    
      <category term="算法" scheme="http://ernestyj.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法" scheme="http://ernestyj.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Sqrt(x) - 求平方根]]></title>
    <link href="http://ernestyj.github.io/2015/12/21/Sqrt(x)%20-%20%E6%B1%82%E5%B9%B3%E6%96%B9%E6%A0%B9/"/>
    <id>http://ernestyj.github.io/2015/12/21/Sqrt(x) - 求平方根/</id>
    <published>2015-12-21T12:44:47.000Z</published>
    <updated>2015-12-21T04:53:20.713Z</updated>
    <content type="html"><![CDATA[<h3 id="Sqrt(x)_-_求平方根">Sqrt(x) - 求平方根</h3><p><strong>Description</strong>: Implement int sqrt(int x).<br> Compute and return the square root of x.</p>
<p>二分搜索：对于一个非负数n，它的平方根不会大于（n/2+1）。<br>在[0, n/2+1]这个范围内可以进行二分搜索，求出n的平方根。</p>
<p>参考：<a href="http://www.cnblogs.com/AnnieKim/archive/2013/04/18/3028607.html" target="_blank" rel="external">http://www.cnblogs.com/AnnieKim/archive/2013/04/18/3028607.html</a></p>
<p>完整的java代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sqrtx</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"*****RESULT*****"</span>);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> Sqrtx().mySqrt(<span class="number">64</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 二分搜索：对于一个非负数n，它的平方根不会大于（n/2+1）。</span><br><span class="line">     * 在[0, n/2+1]这个范围内可以进行二分搜索，求出n的平方根。</span><br><span class="line">     * http://www.cnblogs.com/AnnieKim/archive/2013/04/18/3028607.html</span><br><span class="line">     * <span class="doctag">@param</span> x</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">mySqrt</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> l = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">long</span> r = x/<span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">long</span> mid = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">long</span> square = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt;= r)&#123;</span><br><span class="line">            mid = (l+r)/<span class="number">2</span>;</span><br><span class="line">            square = mid*mid;</span><br><span class="line">            <span class="keyword">if</span> (square == x) <span class="keyword">return</span> (<span class="keyword">int</span>) mid;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (square &lt; x) l = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> r = mid -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Sqrt(x)_-_求平方根">Sqrt(x) - 求平方根</h3><p><strong>Description</strong>: Implement int sqrt(int x).<br> Compute and return the square roo]]>
    </summary>
    
      <category term="LeetCode" scheme="http://ernestyj.github.io/tags/LeetCode/"/>
    
      <category term="java" scheme="http://ernestyj.github.io/tags/java/"/>
    
      <category term="算法" scheme="http://ernestyj.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法" scheme="http://ernestyj.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Text Justification - 文本对齐]]></title>
    <link href="http://ernestyj.github.io/2015/12/20/Text%20Justification%20-%20%E6%96%87%E6%9C%AC%E5%AF%B9%E9%BD%90/"/>
    <id>http://ernestyj.github.io/2015/12/20/Text Justification - 文本对齐/</id>
    <published>2015-12-20T12:44:47.000Z</published>
    <updated>2015-12-20T11:39:20.124Z</updated>
    <content type="html"><![CDATA[<h3 id="Text_Justification_-_文本对齐">Text Justification - 文本对齐</h3><p><strong>Description</strong>: Given an array of words and a length L, format the text such that each line has exactly L characters and is fully (left and right) justified.</p>
<p> You should pack your words in a greedy approach; that is, pack as many words as you can in each line. Pad extra spaces ‘ ‘ when necessary so that each line has exactly L characters.</p>
<p> Extra spaces between words should be distributed as evenly as possible. If the number of spaces on a line do not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right.</p>
<p> For the last line of text, it should be left justified and no extra space is inserted<br> between words.</p>
<p> 注意两个点：<br> a、当该行只放一个单词时，空格全部在右边<br> b、最后一行中单词间只有一个空格，其余空格全部在右边。然后只要贪心选择，在一行中尽量放多的单词。</p>
<p>一些坑：每行中，有下一个单词，才需要补一个空格。算法中，跳到新一行首个单词，才将上一行写入结果（而不是在上一行末单词判断写入）。</p>
<p>此题非常容易出错，正确率很低。<br>参考：<a href="http://blog.csdn.net/linhuanmars/article/details/24063271" target="_blank" rel="external">http://blog.csdn.net/linhuanmars/article/details/24063271</a></p>
<p>完整的java代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TextJustification</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] words = &#123;<span class="string">"This"</span>, <span class="string">"is"</span>, <span class="string">"an"</span>, <span class="string">"example"</span>, <span class="string">"of"</span>, <span class="string">"text"</span>, <span class="string">"justification."</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> maxWidth = <span class="number">16</span>;</span><br><span class="line">        System.out.println(<span class="string">"*****RESULT*****"</span>);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> TextJustification().fullJustify(words, maxWidth));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**TODO 边界极易出错 HARD</span><br><span class="line">     * 每行中，有下一个单词，才需要补一个空格。</span><br><span class="line">     * 算法中，跳到新一行首个单词，才将上一行写入结果（而不是在上一行末单词判断写入）。</span><br><span class="line">     * http://blog.csdn.net/linhuanmars/article/details/24063271</span><br><span class="line">     * <span class="doctag">@param</span> words</span><br><span class="line">     * <span class="doctag">@param</span> maxWidth</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">fullJustify</span><span class="params">(String[] words, <span class="keyword">int</span> maxWidth)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(words==<span class="keyword">null</span> || words.length==<span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> lastHead = <span class="number">0</span>;   <span class="comment">//上一行第一个元素</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;words.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> wordCount = i-lastHead; <span class="comment">//wordCount不含当前第i个</span></span><br><span class="line">            <span class="keyword">if</span>(count + words[i].length() + wordCount &gt; maxWidth) &#123;  <span class="comment">//此时i是新一行的首个单词</span></span><br><span class="line">                <span class="keyword">int</span> avgSpaceNum = <span class="number">0</span>;   <span class="comment">//上一行平均空格数</span></span><br><span class="line">                <span class="keyword">int</span> extraSpaceNum = <span class="number">0</span>;   <span class="comment">//上一行额外空格数</span></span><br><span class="line">                <span class="keyword">if</span>(wordCount-<span class="number">1</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    avgSpaceNum = (maxWidth-count)/(wordCount-<span class="number">1</span>);</span><br><span class="line">                    extraSpaceNum = (maxWidth-count)%(wordCount-<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                StringBuilder str = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=lastHead; j&lt;i; j++) &#123;</span><br><span class="line">                    str.append(words[j]);</span><br><span class="line">                    <span class="keyword">if</span>(j &lt; i-<span class="number">1</span>) &#123;</span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;avgSpaceNum; k++) str.append(<span class="string">" "</span>);   <span class="comment">//补平均空格</span></span><br><span class="line">                        <span class="keyword">if</span>(extraSpaceNum&gt;<span class="number">0</span>) str.append(<span class="string">" "</span>);    <span class="comment">//补额外空格</span></span><br><span class="line">                        extraSpaceNum--;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=str.length(); j&lt;maxWidth; j++) str.append(<span class="string">" "</span>);   <span class="comment">//一个单词时，补末尾</span></span><br><span class="line">                res.add(str.toString());</span><br><span class="line">                count=<span class="number">0</span>;    <span class="comment">//新一行</span></span><br><span class="line">                lastHead=i; <span class="comment">//新一行</span></span><br><span class="line">            &#125;</span><br><span class="line">            count += words[i].length();</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuilder str = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=lastHead; i&lt;words.length; i++) &#123;  <span class="comment">//最后一行</span></span><br><span class="line">            str.append(words[i]);</span><br><span class="line">            <span class="keyword">if</span>(str.length() &lt; maxWidth) str.append(<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=str.length(); i&lt;maxWidth; i++) str.append(<span class="string">" "</span>);</span><br><span class="line">        res.add(str.toString());</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Text_Justification_-_文本对齐">Text Justification - 文本对齐</h3><p><strong>Description</strong>: Given an array of words and a length L, fo]]>
    </summary>
    
      <category term="LeetCode" scheme="http://ernestyj.github.io/tags/LeetCode/"/>
    
      <category term="java" scheme="http://ernestyj.github.io/tags/java/"/>
    
      <category term="算法" scheme="http://ernestyj.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法" scheme="http://ernestyj.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Add Binary - 二进制数加法]]></title>
    <link href="http://ernestyj.github.io/2015/12/19/Add%20Binary%20-%20%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%95%B0%E5%8A%A0%E6%B3%95/"/>
    <id>http://ernestyj.github.io/2015/12/19/Add Binary - 二进制数加法/</id>
    <published>2015-12-19T12:44:47.000Z</published>
    <updated>2015-12-19T09:47:59.567Z</updated>
    <content type="html"><![CDATA[<h3 id="Add_Binary_-_二进制数加法">Add Binary - 二进制数加法</h3><p><strong>Description</strong>: Given two binary strings, return their sum (also a binary string).</p>
<p> For example,<br> a = “11”<br> b = “1”<br> Return “100”.</p>
<p>注意：java中涉及字符串与字符操作比较慢，且字符与整型数转换麻烦容易出错（字符本身也可以作为整数）。</p>
<p>完整的java代码如下（写得比较繁琐，但是速度超过94.27%提交结果）：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddBinary</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"*****RESULT*****"</span>);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> AddBinary().addBinary(<span class="string">"11"</span>, <span class="string">"1"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO int与char转换过程易出错</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addBinary</span><span class="params">(String a, String b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> aLen = a.length(), bLen = b.length();</span><br><span class="line">        <span class="keyword">int</span> len = aLen &gt; bLen ? aLen : bLen;</span><br><span class="line">        <span class="keyword">char</span>[] aChars, bChars;</span><br><span class="line">        <span class="keyword">char</span>[] res = <span class="keyword">new</span> <span class="keyword">char</span>[len + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (len == aLen)&#123;</span><br><span class="line">            aChars = a.toCharArray();</span><br><span class="line">            bChars = <span class="keyword">new</span> <span class="keyword">char</span>[len];</span><br><span class="line">            <span class="keyword">int</span> diff = len-bLen;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (i&lt;diff) bChars[i] = <span class="string">'0'</span>;</span><br><span class="line">                <span class="keyword">else</span> bChars[i] = b.charAt(i-diff);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            aChars = <span class="keyword">new</span> <span class="keyword">char</span>[len];</span><br><span class="line">            <span class="keyword">int</span> diff = len-aLen;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;len; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (i&lt;diff) aChars[i] = <span class="string">'0'</span>;</span><br><span class="line">                <span class="keyword">else</span> aChars[i] = a.charAt(i-diff);</span><br><span class="line">            &#125;</span><br><span class="line">            bChars = b.toCharArray();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> temp = <span class="number">0</span>, extra = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = len-<span class="number">1</span>; i&gt;=<span class="number">0</span>; i--)&#123;</span><br><span class="line">            temp = getInt(aChars[i]) + getInt(bChars[i]) + extra;</span><br><span class="line">            res[i+<span class="number">1</span>] = getChar(temp%<span class="number">2</span>); <span class="comment">//TODO i+1易出错</span></span><br><span class="line">            extra = temp/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (temp&gt;<span class="number">1</span> &amp;&amp; i-<span class="number">1</span> == -<span class="number">1</span>) &#123; <span class="comment">//超出长度</span></span><br><span class="line">                res[<span class="number">0</span>] = <span class="string">'1'</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> String(res);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(Arrays.copyOfRange(res, <span class="number">1</span>, len+<span class="number">1</span>));   <span class="comment">//TODO i+1易出错</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getInt</span><span class="params">(<span class="keyword">char</span> c)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">'0'</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">char</span> <span class="title">getChar</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">'0'</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="string">'1'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Add_Binary_-_二进制数加法">Add Binary - 二进制数加法</h3><p><strong>Description</strong>: Given two binary strings, return their sum (also a bin]]>
    </summary>
    
      <category term="LeetCode" scheme="http://ernestyj.github.io/tags/LeetCode/"/>
    
      <category term="java" scheme="http://ernestyj.github.io/tags/java/"/>
    
      <category term="算法" scheme="http://ernestyj.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法" scheme="http://ernestyj.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Springmvc4集成springfox, swagger UI, springfox-staticdocs]]></title>
    <link href="http://ernestyj.github.io/2015/12/18/Springmvc4%E9%9B%86%E6%88%90springfox,%20Swagger%20UI,%20springfox-staticdocs/"/>
    <id>http://ernestyj.github.io/2015/12/18/Springmvc4集成springfox, Swagger UI, springfox-staticdocs/</id>
    <published>2015-12-18T14:44:47.000Z</published>
    <updated>2015-12-18T13:52:12.069Z</updated>
    <content type="html"><![CDATA[<h2 id="Springmvc4集成springfox,_swagger_UI,_springfox-staticdocs">Springmvc4集成springfox, swagger UI, springfox-staticdocs</h2><p>下面给出相关组件的链接：<br>Swagger: <a href="http://swagger.io/" target="_blank" rel="external">http://swagger.io/</a><br>Springfox: <a href="http://springfox.github.io/springfox/" target="_blank" rel="external">http://springfox.github.io/springfox/</a><br>Asciidoctor: <a href="http://asciidoctor.org/" target="_blank" rel="external">http://asciidoctor.org/</a></p>
<p>Swagger可以用来生成RESTful API文档，Springfox由Swagger-springmvc演变而来。Asciidoctor是将AsciiDoc转为HTML, PDF等文档的转换工具。</p>
<h3 id="Springmvc3集成Swagger-springmvc,_Swagger-ui">Springmvc3集成Swagger-springmvc, Swagger-ui</h3><p>Swagger-springmvc适用于与Springmvc3的集成，具体方法参考：<br><a href="https://github.com/springfox/springfox/blob/v1.0.2/README.md" target="_blank" rel="external">https://github.com/springfox/springfox/blob/v1.0.2/README.md</a><br><a href="https://github.com/albertchendao/demos/tree/master/java/spring/HelloWorld-MVC-Swagger" target="_blank" rel="external">https://github.com/albertchendao/demos/tree/master/java/spring/HelloWorld-MVC-Swagger</a><br>集成 后可以通过手动拷贝的方式引入Swagger-ui，<br>访问<a href="http://host:port/projectName/swagger/index.html" target="_blank" rel="external">http://host:port/projectName/swagger/index.html</a> 即可看到Swagger-ui。</p>
<h3 id="Springmvc4集成springfox">Springmvc4集成springfox</h3><p>查看最新的<a href="http://springfox.github.io/springfox/docs/current/" target="_blank" rel="external">Springfox Reference Documentation</a>，这里给出的说明对初学者来说可能较难上手。可以参考其给出的<a href="https://github.com/springfox/springfox-demos" target="_blank" rel="external">springfox-demos</a>，按照示例在Springmvc4中引入springfox。</p>
<p>Maven依赖：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#60;dependency&#62;&#10;    &#60;groupId&#62;io.springfox&#60;/groupId&#62;&#10;    &#60;artifactId&#62;springfox-swagger2&#60;/artifactId&#62;&#10;    &#60;version&#62;2.2.2&#60;/version&#62;&#10;&#60;/dependency&#62;</span><br></pre></td></tr></table></figure></p>
<p>配置：这里采用java注解方式配置，当然也可以用xml配置。用xml配置的话，@ComponentScan和@EnableWebMvc注解去掉，同时在xml中引入<mvc:annotation-driven>和其bean的声明。<br>里面相关代码和注解具体的含义可以参考<a href="http://springfox.github.io/springfox/docs/current/" target="_blank" rel="external">Springfox Reference Documentation</a>。<br>集成之后，访问/api-docs可以看到json数据。</mvc:annotation-driven></p>
<p>注意：整个工程编码方式应该设置为UTF-8，否则生成的json数据中，中文会出现乱码。如果不行，参考<a href="http://www.cnblogs.com/yuananyun/p/4993426.html" target="_blank" rel="external">Swagger+Spring mvc生成Restful接口文档</a> 自定义MappingJackson2HttpMessageConverter 来设置转换字符编码等。</p>
<p>java注解方式配置如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.common.base.Predicate;</span><br><span class="line"><span class="keyword">import</span> com.google.common.collect.Sets;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.EnableWebMvc;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.AuthorizationScopeBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.AuthorizationScope;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.BasicAuth;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.SecurityReference;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.service.contexts.SecurityContext;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.google.common.base.Predicates.or;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.google.common.collect.Lists.newArrayList;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> springfox.documentation.builders.PathSelectors.regex;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Created by DCLab on 12/17/2015.</span><br><span class="line"> */</span></span><br><span class="line"><span class="annotation">@Configuration</span></span><br><span class="line"><span class="annotation">@EnableWebMvc</span> <span class="comment">//<span class="doctag">NOTE:</span> Only needed in a non-springboot application</span></span><br><span class="line"><span class="annotation">@EnableSwagger</span>2 <span class="comment">//Enable swagger 2.0 spec</span></span><br><span class="line"><span class="annotation">@ComponentScan</span>(<span class="string">"com.eugene.controller"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringfoxDocConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">petApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .groupName(<span class="string">"full-petstore"</span>)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .forCodeGeneration(<span class="keyword">true</span>)</span><br><span class="line">                .select()</span><br><span class="line">                .paths(petstorePaths())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> Predicate&lt;String&gt; <span class="title">petstorePaths</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> or(</span><br><span class="line">                regex(<span class="string">"/api/pet.*"</span>),</span><br><span class="line">                regex(<span class="string">"/api/user.*"</span>),</span><br><span class="line">                regex(<span class="string">"/api/store.*"</span>)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">adminApi</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .groupName(<span class="string">"admins"</span>)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .forCodeGeneration(<span class="keyword">true</span>)</span><br><span class="line">                .select()</span><br><span class="line">                .paths(regex(<span class="string">"/admins.*"</span>))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">userApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        AuthorizationScope[] authScopes = <span class="keyword">new</span> AuthorizationScope[<span class="number">1</span>];</span><br><span class="line">        authScopes[<span class="number">0</span>] = <span class="keyword">new</span> AuthorizationScopeBuilder()</span><br><span class="line">                .scope(<span class="string">"read"</span>)</span><br><span class="line">                .description(<span class="string">"read access"</span>)</span><br><span class="line">                .build();</span><br><span class="line">        SecurityReference securityReference = SecurityReference.builder()</span><br><span class="line">                .reference(<span class="string">"test"</span>)</span><br><span class="line">                .scopes(authScopes)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;SecurityContext&gt; securityContexts = newArrayList(SecurityContext.builder().securityReferences</span><br><span class="line">                (newArrayList(securityReference)).build());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .securitySchemes(newArrayList(<span class="keyword">new</span> BasicAuth(<span class="string">"test"</span>)))</span><br><span class="line">                .securityContexts(securityContexts)</span><br><span class="line">                .groupName(<span class="string">"user"</span>)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                .paths(userOnlyEndpoints())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> Predicate&lt;String&gt; <span class="title">userOnlyEndpoints</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Predicate&lt;String&gt;() &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">apply</span><span class="params">(String input)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> input.contains(<span class="string">"user"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                .title(<span class="string">"Springfox REST API"</span>)</span><br><span class="line">                .description(<span class="string">"Descriptions."</span>)</span><br><span class="line">                .termsOfServiceUrl(<span class="string">"http://springfox.io"</span>)</span><br><span class="line">                .contact(<span class="string">"springfox"</span>)</span><br><span class="line">                .license(<span class="string">"Apache License Version 2.0"</span>)</span><br><span class="line">                .licenseUrl(<span class="string">"https://github.com/springfox/springfox/blob/master/LICENSE"</span>)</span><br><span class="line">                .version(<span class="string">"2.0"</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">configSpringfoxDocket_all</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .produces(Sets.newHashSet(<span class="string">"application/json"</span>))</span><br><span class="line">                .consumes(Sets.newHashSet(<span class="string">"application/json"</span>))</span><br><span class="line">                .protocols(Sets.newHashSet(<span class="string">"http"</span>, <span class="string">"https"</span>))</span><br><span class="line">                .forCodeGeneration(<span class="keyword">true</span>)</span><br><span class="line">                .select().paths(regex(<span class="string">".*"</span>))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">configSpringfoxDocket_foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .groupName(<span class="string">"foo"</span>)</span><br><span class="line">                .produces(Sets.newHashSet(<span class="string">"application/json"</span>))</span><br><span class="line">                .consumes(Sets.newHashSet(<span class="string">"application/json"</span>))</span><br><span class="line">                .protocols(Sets.newHashSet(<span class="string">"http"</span>, <span class="string">"https"</span>))</span><br><span class="line">                .forCodeGeneration(<span class="keyword">true</span>)</span><br><span class="line">                .select().paths(regex(<span class="string">".*foo.*"</span>))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Springmvc4集成swagger_UI">Springmvc4集成swagger UI</h3><p>如果项目使用了Spring Boot，集成swagger UI可以参考<a href="http://springfox.github.io/springfox/docs/current/" target="_blank" rel="external">Springfox Reference Documentation</a>，非常简单。如果没有使用Spring Boot，需要增加一些额外配置。建议参考官方给出的<a href="https://github.com/springfox/springfox-demos" target="_blank" rel="external">springfox-demos</a> 来集成swagger UI。</p>
<p>Maven依赖：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#60;dependency&#62;&#10;    &#60;groupId&#62;io.springfox&#60;/groupId&#62;&#10;    &#60;artifactId&#62;springfox-swagger-ui&#60;/artifactId&#62;&#10;    &#60;version&#62;2.2.2&#60;/version&#62;&#10;&#60;/dependency&#62;</span><br></pre></td></tr></table></figure></p>
<p>由于springfox-swagger-ui采用webjar的方式引入页面，需要在sping xml中配置静态资源访问（使用了Spring Boot则不需要）：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Enables swgger ui--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">mvc:resources</span> <span class="attribute">mapping</span>=<span class="value">"swagger-ui.html"</span> <span class="attribute">location</span>=<span class="value">"classpath:/META-INF/resources/"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">mvc:resources</span> <span class="attribute">mapping</span>=<span class="value">"/webjars/**"</span> <span class="attribute">location</span>=<span class="value">"classpath:/META-INF/resources/webjars/"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>集成swagger UI之后访问<a href="http://localhost:8080/swagger-ui.html" target="_blank" rel="external">http://localhost:8080/swagger-ui.html</a> 即可看到swagger界面。</p>
<p>注意：swagger UI基于/api-docs中提供的数据，若设置springfox时没有在/api-docs中添加相关json数据，swagger UI编译验证过程会报错。验证需要引入commons-lang3包，没有的需要添加依赖。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#60;dependency&#62;&#10;    &#60;groupId&#62;org.apache.commons&#60;/groupId&#62;&#10;    &#60;artifactId&#62;commons-lang3&#60;/artifactId&#62;&#10;    &#60;version&#62;3.4&#60;/version&#62;&#10;&#60;/dependency&#62;</span><br></pre></td></tr></table></figure></p>
<h3 id="Springmvc4集成springfox-staticdocs">Springmvc4集成springfox-staticdocs</h3><p>使用springfox-staticdocs可以生成asciidoc和markdown文档。</p>
<p>同样，如果项目使用了Spring Boot，集成swagger UI可以参考<a href="http://springfox.github.io/springfox/docs/current/" target="_blank" rel="external">Springfox Reference Documentation</a>，也可以参考 <a href="https://swagger2markup.readme.io/docs/springfox-staticdocs" target="_blank" rel="external">https://swagger2markup.readme.io/docs/springfox-staticdocs</a> 。</p>
<p>如果没有使用Spring Boot，则在使用Spring Test时修改一下相关代码和注解即可。写好测试代码后，运行单元测试即可生成asciidoctor和markdown文档。Spring Unit Test代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.eugene.service.AdminService;</span><br><span class="line"><span class="keyword">import</span> io.github.robwin.markup.builder.MarkupLanguage;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.web.WebAppConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.MockMvc;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.request.MockMvcRequestBuilders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.setup.MockMvcBuilders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.WebApplicationContext;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.staticdocs.Swagger2MarkupResultHandler;</span><br><span class="line"></span><br><span class="line"><span class="annotation">@WebAppConfiguration</span></span><br><span class="line"><span class="annotation">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="annotation">@ContextConfiguration</span>(value = &#123;<span class="string">"file:src/main/webapp/WEB-INF/mvc-dispatcher-servlet.xml"</span>,</span><br><span class="line">        <span class="string">"file:src/main/resources/applicationContext.xml"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Swagger2MarkupTest</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WebApplicationContext context;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AdminService adminService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MockMvc mockMvc;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mockMvc = MockMvcBuilders.webAppContextSetup(<span class="keyword">this</span>.context).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">convertSwaggerToAsciiDoc</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mockMvc.perform(MockMvcRequestBuilders.get(<span class="string">"/v2/api-docs"</span>)</span><br><span class="line">                .accept(MediaType.APPLICATION_JSON))</span><br><span class="line">                .andDo(Swagger2MarkupResultHandler.outputDirectory(<span class="string">"src/docs/asciidoc/generated"</span>).build())</span><br><span class="line">                .andExpect(MockMvcResultMatchers.status().isOk());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">convertSwaggerToMarkdown</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mockMvc.perform(MockMvcRequestBuilders.get(<span class="string">"/v2/api-docs"</span>)</span><br><span class="line">                .accept(MediaType.APPLICATION_JSON))</span><br><span class="line">                .andDo(Swagger2MarkupResultHandler.outputDirectory(<span class="string">"src/docs/markdown/generated"</span>)</span><br><span class="line">                        .withMarkupLanguage(MarkupLanguage.MARKDOWN).build())</span><br><span class="line">                .andExpect(MockMvcResultMatchers.status().isOk());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="AsciiDoc转为HTML,_PDF等格式文档">AsciiDoc转为HTML, PDF等格式文档</h3><p>Maven项目中可以集成asciidoctor maven插件，将AsciiDoc转为HTML, PDF等格式文档。可以参考<a href="https://github.com/asciidoctor/asciidoctor-maven-examples" target="_blank" rel="external">asciidoctor-maven-examples</a> 来集成asciidoctor maven插件。集成之后，执行mvn install可以根据指定位置的AsciiDoc文件来生成HTML或PDF文档。</p>
<p>Maven插件设置时的参数含义参考<a href="https://github.com/asciidoctor/asciidoctor-maven-plugin" target="_blank" rel="external">asciidoctor-maven-plugin</a> 。下面给出的配置包含asciidoc-to-html和asciidoc-to-pdf，其中转成pdf对中文字符的支持不完善，部分中文字符会消失。</p>
<p>注意：配置插件时，请不要省略jruby-complete和asciidoctorj的依赖（虽然demo中提示可以省略），否则执行mvn install时很可能会报错。此外，jruby-complete的版本也应注意，尽量使用最新版。</p>
<p>Maven插件配置如下：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#60;plugin&#62;&#10;   &#60;groupId&#62;org.asciidoctor&#60;/groupId&#62;&#10;   &#60;artifactId&#62;asciidoctor-maven-plugin&#60;/artifactId&#62;&#10;   &#60;version&#62;1.5.2&#60;/version&#62;&#10;   &#60;dependencies&#62;&#10;       &#60;dependency&#62;&#10;           &#60;groupId&#62;org.asciidoctor&#60;/groupId&#62;&#10;           &#60;artifactId&#62;asciidoctorj-pdf&#60;/artifactId&#62;&#10;           &#60;version&#62;1.5.0-alpha.10.1&#60;/version&#62;&#10;       &#60;/dependency&#62;&#10;       &#60;dependency&#62;&#10;           &#60;groupId&#62;org.jruby&#60;/groupId&#62;&#10;           &#60;artifactId&#62;jruby-complete&#60;/artifactId&#62;&#10;           &#60;version&#62;9.0.0.0.rc1&#60;/version&#62;&#10;       &#60;/dependency&#62;&#10;       &#60;dependency&#62;&#10;           &#60;groupId&#62;org.asciidoctor&#60;/groupId&#62;&#10;           &#60;artifactId&#62;asciidoctorj&#60;/artifactId&#62;&#10;           &#60;version&#62;1.5.3.2&#60;/version&#62;&#10;       &#60;/dependency&#62;&#10;   &#60;/dependencies&#62;&#10;&#10;   &#60;configuration&#62;&#10;       &#60;sourceDirectory&#62;src/docs/asciidoc&#60;/sourceDirectory&#62;&#10;       &#60;outputDirectory&#62;target/docs/asciidoc&#60;/outputDirectory&#62;&#10;   &#60;/configuration&#62;&#10;&#10;   &#60;executions&#62;&#10;       &#60;execution&#62;&#10;           &#60;id&#62;asciidoc-to-html&#60;/id&#62;&#10;           &#60;phase&#62;generate-resources&#60;/phase&#62;&#10;           &#60;goals&#62;&#10;               &#60;goal&#62;process-asciidoc&#60;/goal&#62;&#10;           &#60;/goals&#62;&#10;           &#60;configuration&#62;&#10;               &#60;backend&#62;html5&#60;/backend&#62;&#10;               &#60;doctype&#62;book&#60;/doctype&#62;&#10;               &#60;sourceHighlighter&#62;coderay&#60;/sourceHighlighter&#62;&#10;               &#60;attributes&#62;&#10;                   &#60;imagesdir&#62;./images&#60;/imagesdir&#62;&#10;                   &#60;toc&#62;left&#60;/toc&#62;&#10;                   &#60;icons&#62;font&#60;/icons&#62;&#10;                   &#60;sectanchors&#62;true&#60;/sectanchors&#62;&#10;                   &#60;!-- set the idprefix to blank --&#62;&#10;                   &#60;idprefix/&#62;&#10;                   &#60;idseparator&#62;-&#60;/idseparator&#62;&#10;                   &#60;docinfo1&#62;true&#60;/docinfo1&#62;&#10;               &#60;/attributes&#62;&#10;           &#60;/configuration&#62;&#10;       &#60;/execution&#62;&#10;       &#60;!--asciidoc&#29983;&#25104;pdf&#23545;&#20013;&#25991;&#23383;&#31526;&#30340;&#25903;&#25345;&#19981;&#23436;&#21892;--&#62;&#10;       &#60;!--&#60;execution&#62;--&#62;&#10;           &#60;!--&#60;id&#62;generate-pdf-doc&#60;/id&#62;--&#62;&#10;           &#60;!--&#60;phase&#62;generate-resources&#60;/phase&#62;--&#62;&#10;           &#60;!--&#60;goals&#62;--&#62;&#10;               &#60;!--&#60;goal&#62;process-asciidoc&#60;/goal&#62;--&#62;&#10;           &#60;!--&#60;/goals&#62;--&#62;&#10;           &#60;!--&#60;configuration&#62;--&#62;&#10;               &#60;!--&#60;backend&#62;pdf&#60;/backend&#62;--&#62;&#10;               &#60;!--&#38;lt;!&#38;ndash; Since 1.5.0-alpha.9 PDF back-end can use &#39;rouge&#39; as well as &#39;coderay&#39; source highlighting &#38;ndash;&#38;gt;--&#62;&#10;               &#60;!--&#60;sourceHighlighter&#62;rouge&#60;/sourceHighlighter&#62;--&#62;&#10;               &#60;!--&#60;attributes&#62;--&#62;&#10;                   &#60;!--&#60;icons&#62;font&#60;/icons&#62;--&#62;&#10;                   &#60;!--&#60;pagenums/&#62;--&#62;&#10;                   &#60;!--&#60;toc/&#62;--&#62;&#10;                   &#60;!--&#60;idprefix/&#62;--&#62;&#10;                   &#60;!--&#60;idseparator&#62;-&#60;/idseparator&#62;--&#62;&#10;               &#60;!--&#60;/attributes&#62;--&#62;&#10;           &#60;!--&#60;/configuration&#62;--&#62;&#10;       &#60;!--&#60;/execution&#62;--&#62;&#10;   &#60;/executions&#62;&#10;&#60;/plugin&#62;</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Springmvc4集成springfox,_swagger_UI,_springfox-staticdocs">Springmvc4集成springfox, swagger UI, springfox-staticdocs</h2><p>下面给出相关组件的链接：]]>
    </summary>
    
      <category term="doc" scheme="http://ernestyj.github.io/tags/doc/"/>
    
      <category term="java" scheme="http://ernestyj.github.io/tags/java/"/>
    
      <category term="spring" scheme="http://ernestyj.github.io/tags/spring/"/>
    
      <category term="web" scheme="http://ernestyj.github.io/tags/web/"/>
    
      <category term="spring" scheme="http://ernestyj.github.io/categories/spring/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Valid Number - 合法数字]]></title>
    <link href="http://ernestyj.github.io/2015/12/18/Valid%20Number%20-%20%E5%90%88%E6%B3%95%E6%95%B0%E5%AD%97/"/>
    <id>http://ernestyj.github.io/2015/12/18/Valid Number - 合法数字/</id>
    <published>2015-12-18T12:44:47.000Z</published>
    <updated>2015-12-18T13:42:32.961Z</updated>
    <content type="html"><![CDATA[<h3 id="Valid_Number_-_合法数字">Valid Number - 合法数字</h3><p><strong>Description</strong>: Validate if a given string is numeric.</p>
<p> Some examples:<br> “0” =&gt; true<br> “ 0.1 “ =&gt; true<br> “abc” =&gt; false<br> “1 a” =&gt; false<br> “2e10” =&gt; true</p>
<p> Note: It is intended for the problem statement to be ambiguous. You should gather all requirements up front before implementing one.</p>
<p>解题：由于博主不允许转载，请自行打开链接查看。<br>参考：<a href="http://blog.csdn.net/linhuanmars/article/details/23809661" target="_blank" rel="external">http://blog.csdn.net/linhuanmars/article/details/23809661</a></p>
<p>完整的java代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidNumber</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"*****RESULT*****"</span>);</span><br><span class="line">        <span class="comment">//"84656e656D" x "078332e437" v "-1.e49046 " v</span></span><br><span class="line">        System.out.println(Double.valueOf(<span class="string">"-1.e49046 "</span>));</span><br><span class="line">        System.out.println(<span class="keyword">new</span> ValidNumber().isNumber(<span class="string">"-1.e49046 "</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 基本规则是按照科学计数法，所以会出现的特殊字符有以下几个：</span><br><span class="line">     * 符号位‘+’，‘-’，小数点‘.’，还有‘e’和‘E’，剩下的就只有数字0-9了，</span><br><span class="line">     * 其他字符如果出现就是非法字符，返回false。</span><br><span class="line">     * 数字字符在哪里出现都是ok的，我们主要考虑几个特殊字符的情况：</span><br><span class="line">     对于小数点出现的时候，我们要满足一下这些条件：</span><br><span class="line">     （1）前面不能有小数点或者‘e’和‘E’；（2）前一位是数字（不能是第一位）或者后一位要是数字（不能是最后一位）。</span><br><span class="line">     对于正负号出现的情况，要满足条件：</span><br><span class="line">     （1）必须是第一位或者在‘e’和‘E’后一位；（2）后一位要是数字。</span><br><span class="line">     对于‘e’和‘E’的情况，要满足：</span><br><span class="line">     （1）前面不能有‘e’和‘E’出现过；（2）不能是第一位（前面没数字科学计数没有意义）或者最后一位（后面没数字就不用写指数了）。</span><br><span class="line">     参考：http://blog.csdn.net/linhuanmars/article/details/23809661</span><br><span class="line">     * <span class="doctag">@param</span> s</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isNumber</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        s = s.trim();</span><br><span class="line">        <span class="keyword">if</span>(s.length()==<span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">boolean</span> dotFlag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">boolean</span> eFlag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">switch</span>(s.charAt(i)) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'.'</span>:</span><br><span class="line">                    <span class="keyword">if</span>(dotFlag || eFlag || ((i==<span class="number">0</span> || !(s.charAt(i-<span class="number">1</span>)&gt;=<span class="string">'0'</span> &amp;&amp; s.charAt(i-<span class="number">1</span>)&lt;=<span class="string">'9'</span>))</span><br><span class="line">                            &amp;&amp; (i==s.length()-<span class="number">1</span> || !(s.charAt(i+<span class="number">1</span>)&gt;=<span class="string">'0'</span> &amp;&amp; s.charAt(i+<span class="number">1</span>)&lt;=<span class="string">'9'</span>))))</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    dotFlag = <span class="keyword">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'+'</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'-'</span>:</span><br><span class="line">                    <span class="keyword">if</span>((i&gt;<span class="number">0</span> &amp;&amp; (s.charAt(i-<span class="number">1</span>)!=<span class="string">'e'</span> &amp;&amp; s.charAt(i-<span class="number">1</span>)!=<span class="string">'E'</span>))</span><br><span class="line">                            || (i==s.length()-<span class="number">1</span> || !(s.charAt(i+<span class="number">1</span>)&gt;=<span class="string">'0'</span> &amp;&amp; s.charAt(i+<span class="number">1</span>)&lt;=<span class="string">'9'</span> || s.charAt(i+<span class="number">1</span>)==<span class="string">'.'</span>)))</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'e'</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'E'</span>:</span><br><span class="line">                    <span class="keyword">if</span>(eFlag || i==s.length()-<span class="number">1</span> || i==<span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    eFlag = <span class="keyword">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'0'</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'1'</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'2'</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'3'</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'4'</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'5'</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'6'</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'7'</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'8'</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'9'</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Valid_Number_-_合法数字">Valid Number - 合法数字</h3><p><strong>Description</strong>: Validate if a given string is numeric.</p>
<p> Some ex]]>
    </summary>
    
      <category term="LeetCode" scheme="http://ernestyj.github.io/tags/LeetCode/"/>
    
      <category term="java" scheme="http://ernestyj.github.io/tags/java/"/>
    
      <category term="算法" scheme="http://ernestyj.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法" scheme="http://ernestyj.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Minimum Path Sum - 最小路径和]]></title>
    <link href="http://ernestyj.github.io/2015/12/17/Minimum%20Path%20Sum%20-%20%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E5%92%8C/"/>
    <id>http://ernestyj.github.io/2015/12/17/Minimum Path Sum - 最小路径和/</id>
    <published>2015-12-17T12:44:47.000Z</published>
    <updated>2015-12-17T02:53:07.397Z</updated>
    <content type="html"><![CDATA[<h3 id="Minimum_Path_Sum_-_最小路径和">Minimum Path Sum - 最小路径和</h3><p><strong>Description</strong>: Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.</p>
<p> Note: You can only move either down or right at any point in time.</p>
<p>思路：动态规划：res[i][j]=grid[i][j] + Min(res[i-1][j], res[i][j-1])。</p>
<p>完整的java代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MinimumPathSum</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[][] grid = &#123;&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">                                &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">                                &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;&#125;;</span><br><span class="line"><span class="comment">//        int[][] grid = &#123;&#123;1&#125;&#125;;</span></span><br><span class="line">        System.out.println(<span class="string">"*****RESULT*****"</span>);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> MinimumPathSum().minPathSum(grid));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 动态规划：res[i][j]=grid[i][j] + Min(res[i-1][j], res[i][j-1])</span><br><span class="line">     * <span class="doctag">@param</span> grid</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minPathSum</span><span class="params">(<span class="keyword">int</span>[][] grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = grid.length;</span><br><span class="line">        <span class="keyword">int</span> n = grid[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">int</span>[][] res = <span class="keyword">new</span> <span class="keyword">int</span>[m][n];</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>, j=<span class="number">0</span>;</span><br><span class="line">        res[<span class="number">0</span>][<span class="number">0</span>] = grid[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;m; i++)&#123;</span><br><span class="line">            res[i][<span class="number">0</span>] = grid[i][<span class="number">0</span>] + res[i-<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (j=<span class="number">1</span>; j&lt;n; j++)&#123;</span><br><span class="line">            res[<span class="number">0</span>][j] = grid[<span class="number">0</span>][j] + res[<span class="number">0</span>][j-<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;m; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (j=<span class="number">1</span>; j&lt;n; j++)&#123;</span><br><span class="line">                res[i][j] = grid[i][j] + Math.min(res[i-<span class="number">1</span>][j], res[i][j-<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res[i-<span class="number">1</span>][j-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Minimum_Path_Sum_-_最小路径和">Minimum Path Sum - 最小路径和</h3><p><strong>Description</strong>: Given a m x n grid filled with non-negative ]]>
    </summary>
    
      <category term="LeetCode" scheme="http://ernestyj.github.io/tags/LeetCode/"/>
    
      <category term="java" scheme="http://ernestyj.github.io/tags/java/"/>
    
      <category term="算法" scheme="http://ernestyj.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法" scheme="http://ernestyj.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Unique Paths II - 唯一路径II]]></title>
    <link href="http://ernestyj.github.io/2015/12/16/Unique%20Paths%20II%20-%20%E5%94%AF%E4%B8%80%E8%B7%AF%E5%BE%84II/"/>
    <id>http://ernestyj.github.io/2015/12/16/Unique Paths II - 唯一路径II/</id>
    <published>2015-12-16T12:44:47.000Z</published>
    <updated>2015-12-16T10:35:21.421Z</updated>
    <content type="html"><![CDATA[<h3 id="Unique_Paths_II_-_唯一路径II">Unique Paths II - 唯一路径II</h3><p><strong>Description</strong>: Follow up for “Unique Paths”:<br> Now consider if some obstacles are added to the grids. How many unique paths would there be?<br> An obstacle and empty space is marked as 1 and 0 respectively in the grid.</p>
<p> Note: m and n will be at most 100.</p>
<p>思路：动态规划：res[i][j]=res[i-1][j]+res[i][j-1]。</p>
<p>完整的java代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UniquePathsII</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        int[][] obstacleGrid = &#123;&#123;0,0,0&#125;,</span></span><br><span class="line"><span class="comment">//                                &#123;0,1,0&#125;,</span></span><br><span class="line"><span class="comment">//                                &#123;0,0,0&#125;&#125;;</span></span><br><span class="line">        <span class="keyword">int</span>[][] obstacleGrid = &#123;&#123;<span class="number">1</span>&#125;&#125;;</span><br><span class="line">        System.out.println(<span class="string">"*****RESULT*****"</span>);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> UniquePathsII().uniquePathsWithObstacles(obstacleGrid));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 动态规划：res[i][j]=res[i-1][j]+res[i][j-1]</span><br><span class="line">     * <span class="doctag">@param</span> obstacleGrid</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">uniquePathsWithObstacles</span><span class="params">(<span class="keyword">int</span>[][] obstacleGrid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = obstacleGrid.length;</span><br><span class="line">        <span class="keyword">int</span> n = obstacleGrid[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">if</span> (obstacleGrid[<span class="number">0</span>][<span class="number">0</span>] == <span class="number">1</span> || obstacleGrid[m-<span class="number">1</span>][n-<span class="number">1</span>] == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>[][] res = <span class="keyword">new</span> <span class="keyword">int</span>[m][n];</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>, j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;m; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (obstacleGrid[i][<span class="number">0</span>] == <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">            res[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (j=<span class="number">0</span>; j&lt;n; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (obstacleGrid[<span class="number">0</span>][j] == <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">            res[<span class="number">0</span>][j] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;m; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (j=<span class="number">1</span>; j&lt;n; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (obstacleGrid[i][j] != <span class="number">1</span>)&#123;</span><br><span class="line">                    res[i][j] = res[i-<span class="number">1</span>][j] + res[i][j-<span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res[i-<span class="number">1</span>][j-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Unique_Paths_II_-_唯一路径II">Unique Paths II - 唯一路径II</h3><p><strong>Description</strong>: Follow up for “Unique Paths”:<br> Now consid]]>
    </summary>
    
      <category term="LeetCode" scheme="http://ernestyj.github.io/tags/LeetCode/"/>
    
      <category term="java" scheme="http://ernestyj.github.io/tags/java/"/>
    
      <category term="算法" scheme="http://ernestyj.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法" scheme="http://ernestyj.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Unique Paths - 唯一路径]]></title>
    <link href="http://ernestyj.github.io/2015/12/15/Unique%20Paths%20-%20%E5%94%AF%E4%B8%80%E8%B7%AF%E5%BE%84/"/>
    <id>http://ernestyj.github.io/2015/12/15/Unique Paths - 唯一路径/</id>
    <published>2015-12-15T12:44:47.000Z</published>
    <updated>2015-12-15T05:19:08.236Z</updated>
    <content type="html"><![CDATA[<h3 id="Unique_Paths_-_唯一路径">Unique Paths - 唯一路径</h3><p><strong>Description</strong>: A robot is located at the top-left corner of a m x n grid (marked ‘Start’ in the diagram below).<br> The robot can only move either down or right at any point in time.<br> The robot is trying to reach the bottom-right corner of the grid (marked ‘Finish’ in the diagram below).<br> How many possible unique paths are there?</p>
<p> Note: m and n will be at most 100.</p>
<p>方法：</p>
<ol>
<li>转化为组合数求解：<br>从m+n-2个位置中挑选n-1个位置；C(n, k)=n(n-1)(n-2)…(n-k+1)/k!<br>  注意：要计算阶乘的部分用double，否则很容易越界；<br>  时间复杂度：O(min(m,n))，因为只需做一次行或者列的扫描；<br>  空间复杂度：O(1)。<ol>
<li>递归：到达某一格的路径数量等于它的上面和左边的路径数之和，结束条件是走到行或者列的边缘；<br>时间复杂度：结果数量的量级。测试用例会超时。</li>
</ol>
</li>
<li>动态规划：res[i][j]=res[i-1][j]+res[i][j-1]，在递归基础上用一个数组来保存历史结果，降低时间复杂度；<br>为简化存储，只需要用一个一维数组存上一行的信息即可。<br>时间复杂度：O(m*n)；空间复杂度：O(n)。<br>参考：<a href="http://blog.csdn.net/linhuanmars/article/details/22126357" target="_blank" rel="external">http://blog.csdn.net/linhuanmars/article/details/22126357</a></li>
</ol>
<p>完整的java代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UniquePaths</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"*****RESULT*****"</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 转化为组合数求解：从m+n-2个位置中挑选n-1个位置；C(n, k)=n(n-1)(n-2)...(n-k+1)/k!</span><br><span class="line">     * 注意：要计算阶乘的部分用double，否则很容易越界；</span><br><span class="line">     * 时间复杂度：O(min(m,n))，因为只需做一次行或者列的扫描；</span><br><span class="line">     * 空间复杂度：O(1)。</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">uniquePaths</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> numerator = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">double</span> denominator = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> small = m&lt;n ? m-<span class="number">1</span> : n-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=small; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            denominator *= i;</span><br><span class="line">            numerator *= (m+n-<span class="number">2</span>)+<span class="number">1</span>-i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>)(numerator/denominator);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 递归：到达某一格的路径数量等于它的上面和左边的路径数之和，结束条件是走到行或者列的边缘；</span><br><span class="line">     * 时间复杂度：结果数量的量级。测试用例会超时。</span><br><span class="line">     * 动态规划：res[i][j]=res[i-1][j]+res[i][j-1]，在递归基础上用一个数组来保存历史结果，降低时间复杂度；</span><br><span class="line">     * 为简化存储，只需要用一个一维数组存上一行的信息即可。</span><br><span class="line">     * 时间复杂度：O(m*n)；空间复杂度：O(n)。</span><br><span class="line">     * 参考：http://blog.csdn.net/linhuanmars/article/details/22126357</span><br><span class="line">     * <span class="doctag">@param</span> m</span><br><span class="line">     * <span class="doctag">@param</span> n</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">uniquePaths1</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[n]; <span class="comment">//存上一行的信息</span></span><br><span class="line">        res[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)  <span class="comment">//m-1+1，多出一行存初始值</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;n; j++)  <span class="comment">//n-1</span></span><br><span class="line">                res[j] += res[j-<span class="number">1</span>];  <span class="comment">//更新新一行的信息</span></span><br><span class="line">        <span class="keyword">return</span> res[n-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Unique_Paths_-_唯一路径">Unique Paths - 唯一路径</h3><p><strong>Description</strong>: A robot is located at the top-left corner of a m x n g]]>
    </summary>
    
      <category term="LeetCode" scheme="http://ernestyj.github.io/tags/LeetCode/"/>
    
      <category term="java" scheme="http://ernestyj.github.io/tags/java/"/>
    
      <category term="算法" scheme="http://ernestyj.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法" scheme="http://ernestyj.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Rotate List - 翻转链表]]></title>
    <link href="http://ernestyj.github.io/2015/12/14/Rotate%20List%20-%20%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
    <id>http://ernestyj.github.io/2015/12/14/Rotate List - 翻转链表/</id>
    <published>2015-12-14T12:44:47.000Z</published>
    <updated>2015-12-14T08:49:06.967Z</updated>
    <content type="html"><![CDATA[<h3 id="Rotate_List_-_翻转链表">Rotate List - 翻转链表</h3><p><strong>Description</strong>: Given a list, rotate the list to the right by k places, where k is non-negative.<br> 把后k个rotate到list前面去，k可以超过list本身长度。</p>
<p> For example:<br> Given 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL and k = 2,<br> return 4-&gt;5-&gt;1-&gt;2-&gt;3-&gt;NULL.</p>
<p>思路：因为k可以超过list本身长度，可以先首尾连起来，然后找到该断开的地方断开。</p>
<p>完整的java代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RotateList</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"*****RESULT*****"</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> val;</span><br><span class="line">        ListNode next;</span><br><span class="line">        ListNode(<span class="keyword">int</span> x) &#123; val = x; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//因为k可以超过list本身长度，可以先首尾连起来，然后找到该断开的地方断开。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">rotateRight</span><span class="params">(ListNode head, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span> || k == <span class="number">0</span>) <span class="keyword">return</span> head;</span><br><span class="line">        ListNode p = head;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">1</span>;    <span class="comment">//since p is already point to head</span></span><br><span class="line">        <span class="keyword">while</span> (p.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            len++;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        p.next = head;  <span class="comment">//form a loop</span></span><br><span class="line">        k = k % len;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len - k; i++) p = p.next;</span><br><span class="line">        <span class="comment">//now p points to the prev of the new head</span></span><br><span class="line">        head = p.next;</span><br><span class="line">        p.next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Rotate_List_-_翻转链表">Rotate List - 翻转链表</h3><p><strong>Description</strong>: Given a list, rotate the list to the right by k places, ]]>
    </summary>
    
      <category term="LeetCode" scheme="http://ernestyj.github.io/tags/LeetCode/"/>
    
      <category term="java" scheme="http://ernestyj.github.io/tags/java/"/>
    
      <category term="算法" scheme="http://ernestyj.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法" scheme="http://ernestyj.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Permutation Sequence - 全排列有序序列]]></title>
    <link href="http://ernestyj.github.io/2015/12/13/Permutation%20Sequence%20-%20%E5%85%A8%E6%8E%92%E5%88%97%E6%9C%89%E5%BA%8F%E5%BA%8F%E5%88%97/"/>
    <id>http://ernestyj.github.io/2015/12/13/Permutation Sequence - 全排列有序序列/</id>
    <published>2015-12-13T12:44:47.000Z</published>
    <updated>2015-12-13T14:28:32.943Z</updated>
    <content type="html"><![CDATA[<h3 id="Permutation_Sequence_-_全排列有序序列">Permutation Sequence - 全排列有序序列</h3><p><strong>Description</strong>: The set [1,2,3,…,n] contains a total of n! unique permutations.</p>
<p> By listing and labeling all of the permutations in order, We get the following sequence (ie, for n = 3):<br> 1.”123” 2.”132” 3.”213” 4.”231” 5.”312” 6.”321”</p>
<p> Given n and k, return the kth permutation sequence.</p>
<p> Note: Given n will be between 1 and 9 inclusive.</p>
<p>方法：</p>
<ol>
<li>使用Next Permutation的思路，但会大数据超时；</li>
<li>题目要求全排列有序，而Permutations这题中用回溯法得到的全排列并非有序。使用另一种递归法思路，但是也会大数据超时，超时用例n=9, k=54494。<br>参考：<a href="http://www.ericleschinski.com/c/java_permutations_recursion/" target="_blank" rel="external">http://www.ericleschinski.com/c/java_permutations_recursion/</a></li>
<li>发现数学规律进行解题：<br>  a. 以某一数字开头的排列有(n-1)!个，先计算(n-1)!；k=k-1将k转换为从0开始（原来k从1开始）；<br>  b. 第一位数字是“原字符串”位置k/(n-1)!处的字符；更新k=k%(n-1)!；<br>  c. 第二位数字是“原字符串”位置k/(n-2)!处的字符；更新k=k%(n-2)!；<br>  d. 不断重复b、c，直至第n位数字。（注意：每确定一位数字，“原字符串”应移除该数字）<br>  时间复杂度：O(n^2)；空间复杂度：O(n)；<br>  参考：<a href="http://blog.csdn.net/linhuanmars/article/details/22028697" target="_blank" rel="external">http://blog.csdn.net/linhuanmars/article/details/22028697</a></li>
</ol>
<p>完整的java代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PermutationSequence</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String result = <span class="keyword">new</span> PermutationSequence().getPermutation(<span class="number">9</span>, <span class="number">362880</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 发现数学规律进行解题：</span><br><span class="line">     * 1. 以某一数字开头的排列有(n-1)!个，先计算(n-1)!；k=k-1将k转换为从0开始（原来k从1开始）；</span><br><span class="line">     2. 第一位数字是“原字符串”位置k/(n-1)!处的字符；更新k=k%(n-1)!；</span><br><span class="line">     3. 第二位数字是“原字符串”位置k/(n-2)!处的字符；更新k=k%(n-2)!；</span><br><span class="line">     4. 不断重复2、3，直至第n位数字。（注意：每确定一位数字，“原字符串”应移除该数字）</span><br><span class="line">     时间复杂度：O(n^2)；空间复杂度：O(n)；</span><br><span class="line">     参考：http://blog.csdn.net/linhuanmars/article/details/22028697</span><br><span class="line">     * <span class="doctag">@param</span> n</span><br><span class="line">     * <span class="doctag">@param</span> k</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPermutation</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="comment">//生成原字符串</span></span><br><span class="line">        List&lt;Integer&gt; origin = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) origin.add(i);</span><br><span class="line">        <span class="comment">//计算(n-1)!</span></span><br><span class="line">        <span class="keyword">int</span> factorial = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) factorial *= i;</span><br><span class="line">        <span class="comment">//k转换为从0开始</span></span><br><span class="line">        k = k - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//计算Kth全排列串中第i位(0&lt;i&lt;n)数字</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> index = k / factorial;  <span class="comment">//得到第i位数字字符</span></span><br><span class="line">            k = k % factorial;  <span class="comment">//更新k</span></span><br><span class="line">            sb.append(origin.get(index));</span><br><span class="line">            origin.remove(index); <span class="comment">//每确定一位数字，“原字符串”应移除该数字</span></span><br><span class="line">            <span class="keyword">if</span> (i &lt; n - <span class="number">1</span>) &#123;    <span class="comment">//更新factorial</span></span><br><span class="line">                factorial = factorial / (n - <span class="number">1</span> - i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 使用Next Permutation会大数据超时</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; strings = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">/**TODO 此解法大数据超时，超时用例n=9, k=54494</span><br><span class="line">     * 题目要求全排列有序，而Permutations这题中用回溯法得到的全排列并非有序。</span><br><span class="line">     * 另一种思路：递归法。</span><br><span class="line">     * 参考：http://www.ericleschinski.com/c/java_permutations_recursion/</span><br><span class="line">     * <span class="doctag">@param</span> n</span><br><span class="line">     * <span class="doctag">@param</span> k</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPermutation1</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        StringBuilder builder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) builder.append(i);</span><br><span class="line">        String s = builder.toString();</span><br><span class="line">        permutation(<span class="string">""</span>, s);</span><br><span class="line">        <span class="keyword">return</span> strings.get(k - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">permutation</span><span class="params">(String prefix, String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = str.length();</span><br><span class="line">        <span class="keyword">if</span> (len == <span class="number">0</span>) strings.add(prefix);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">                permutation(prefix + str.charAt(i), str.substring(<span class="number">0</span>, i) + str.substring(i+<span class="number">1</span>, len));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Permutation_Sequence_-_全排列有序序列">Permutation Sequence - 全排列有序序列</h3><p><strong>Description</strong>: The set [1,2,3,…,n] contains a t]]>
    </summary>
    
      <category term="LeetCode" scheme="http://ernestyj.github.io/tags/LeetCode/"/>
    
      <category term="java" scheme="http://ernestyj.github.io/tags/java/"/>
    
      <category term="算法" scheme="http://ernestyj.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法" scheme="http://ernestyj.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Spiral Matrix II- 螺旋矩阵2]]></title>
    <link href="http://ernestyj.github.io/2015/12/12/Spiral%20Matrix%20II-%20%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B52/"/>
    <id>http://ernestyj.github.io/2015/12/12/Spiral Matrix II- 螺旋矩阵2/</id>
    <published>2015-12-12T12:44:47.000Z</published>
    <updated>2015-12-12T11:57:48.273Z</updated>
    <content type="html"><![CDATA[<h3 id="Spiral_Matrix_II-_螺旋矩阵2">Spiral Matrix II- 螺旋矩阵2</h3><p><strong>Description</strong>: Given an integer n, generate a square matrix filled with elements from 1 to n2 in spiral order.</p>
<p> For example,<br> Given n = 3,<br> You should return the following matrix:<br> [<br> [ 1, 2, 3 ],<br> [ 8, 9, 4 ],<br> [ 7, 6, 5 ]<br> ]</p>
<p>思路：与Spiral Matrix的思路基本一致。</p>
<p>完整的java代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpiralMatrixII</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"*****RESULT*****"</span>);</span><br><span class="line">        <span class="keyword">int</span>[][] matrix = <span class="keyword">new</span> SpiralMatrixII().generateMatrix(<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] i : matrix)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j : i)&#123;</span><br><span class="line">                System.out.print(j + <span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//若只剩下一行/列，则只处理此行/列，其余按circle方式处理</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[][] generateMatrix(<span class="keyword">int</span> n) &#123;</span><br><span class="line">        <span class="keyword">int</span>[][] matrix = <span class="keyword">new</span> <span class="keyword">int</span>[n][n];</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> matrix;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            matrix[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> matrix;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">0</span>, y = <span class="number">0</span>, k = <span class="number">1</span>, i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//if one row/column left, no circle can be formed</span></span><br><span class="line">            <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">                matrix[x++][y] = k++;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//below, process a circle</span></span><br><span class="line">            <span class="comment">//top - move right</span></span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n-<span class="number">1</span>;i++) matrix[x][y++] = k++;</span><br><span class="line">            <span class="comment">//right - move down</span></span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n-<span class="number">1</span>;i++) matrix[x++][y] = k++;</span><br><span class="line">            <span class="comment">//bottom - move left</span></span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n-<span class="number">1</span>;i++) matrix[x][y--] = k++;</span><br><span class="line">            <span class="comment">//left - move up</span></span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n-<span class="number">1</span>;i++) matrix[x--][y] = k++;</span><br><span class="line">            x++;</span><br><span class="line">            y++;</span><br><span class="line">            n=n-<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> matrix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Spiral_Matrix_II-_螺旋矩阵2">Spiral Matrix II- 螺旋矩阵2</h3><p><strong>Description</strong>: Given an integer n, generate a square matrix f]]>
    </summary>
    
      <category term="LeetCode" scheme="http://ernestyj.github.io/tags/LeetCode/"/>
    
      <category term="java" scheme="http://ernestyj.github.io/tags/java/"/>
    
      <category term="算法" scheme="http://ernestyj.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法" scheme="http://ernestyj.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Insert Interval - 区间插入]]></title>
    <link href="http://ernestyj.github.io/2015/12/10/Insert%20Interval%20-%20%E5%8C%BA%E9%97%B4%E6%8F%92%E5%85%A5/"/>
    <id>http://ernestyj.github.io/2015/12/10/Insert Interval - 区间插入/</id>
    <published>2015-12-10T12:44:47.000Z</published>
    <updated>2015-12-10T15:35:49.935Z</updated>
    <content type="html"><![CDATA[<h3 id="Insert_Interval_-_区间插入">Insert Interval - 区间插入</h3><p><strong>Description</strong>: Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary). You may assume that the intervals were initially sorted according to their start times.</p>
<p> Example 1:<br> Given intervals [1,3],[6,9], insert and merge [2,5] in as [1,5],[6,9].</p>
<p> Example 2:<br> Given [1,2],[3,5],[6,7],[8,10],[12,16], insert and merge [4,9] in as [1,2],[3,10],[12,16].<br> This is because the new interval [4,9] overlaps with [3,5],[6,7],[8,10].</p>
<p>思路：与Merge Intervals相似，只是这道题中给定输入已排好序，且需要插入一个新的值。方法就是先将newInterval插入到intervals，再合并。</p>
<p>注意：将新值插入有序序列中边界条件易出错。</p>
<p>完整的java代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InsertInterval</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Interval&gt; intervals = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        intervals.add(<span class="keyword">new</span> Interval(<span class="number">0</span>, <span class="number">2</span>));</span><br><span class="line">        intervals.add(<span class="keyword">new</span> Interval(<span class="number">3</span>, <span class="number">5</span>));</span><br><span class="line">        intervals.add(<span class="keyword">new</span> Interval(<span class="number">6</span>, <span class="number">8</span>));</span><br><span class="line">        Interval newInterval = <span class="keyword">new</span> Interval(<span class="number">4</span>, <span class="number">7</span>);</span><br><span class="line">        System.out.println(<span class="string">"*****RESULT*****"</span>);</span><br><span class="line">        List&lt;Interval&gt; result = <span class="keyword">new</span> InsertInterval().insert(intervals, newInterval);</span><br><span class="line">        <span class="keyword">for</span> (Interval interval : result)&#123;</span><br><span class="line">            System.out.print(<span class="string">"["</span> + interval.start + <span class="string">","</span> + interval.end + <span class="string">"] "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Interval</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> start;</span><br><span class="line">        <span class="keyword">int</span> end;</span><br><span class="line">        Interval() &#123; start = <span class="number">0</span>; end = <span class="number">0</span>; &#125;</span><br><span class="line">        Interval(<span class="keyword">int</span> s, <span class="keyword">int</span> e) &#123; start = s; end = e; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Interval&gt; <span class="title">insert</span><span class="params">(List&lt;Interval&gt; intervals, Interval newInterval)</span> </span>&#123;</span><br><span class="line">        List&lt;Interval&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (intervals == <span class="keyword">null</span> || intervals.size() == <span class="number">0</span>)&#123;</span><br><span class="line">            result.add(newInterval);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将newInterval插入到intervals TODO 边界条件极易出错</span></span><br><span class="line">        <span class="keyword">boolean</span> isEnd = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; intervals.size(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (newInterval.start &lt;= intervals.get(i).start)&#123;</span><br><span class="line">                intervals.add(i, newInterval);</span><br><span class="line">                isEnd = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (isEnd) intervals.add(newInterval);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> start = intervals.get(<span class="number">0</span>).start;</span><br><span class="line">        <span class="keyword">int</span> end = intervals.get(<span class="number">0</span>).end;</span><br><span class="line">        <span class="keyword">for</span> (Interval interval : intervals)&#123;</span><br><span class="line">            <span class="keyword">if</span> (interval.start &gt; end)&#123;</span><br><span class="line">                result.add(<span class="keyword">new</span> Interval(start, end));</span><br><span class="line">                start = interval.start;</span><br><span class="line">                end = interval.end;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (interval.end &gt; end)&#123;</span><br><span class="line">                    end = interval.end;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        result.add(<span class="keyword">new</span> Interval(start, end));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Insert_Interval_-_区间插入">Insert Interval - 区间插入</h3><p><strong>Description</strong>: Given a set of non-overlapping intervals, insert]]>
    </summary>
    
      <category term="LeetCode" scheme="http://ernestyj.github.io/tags/LeetCode/"/>
    
      <category term="java" scheme="http://ernestyj.github.io/tags/java/"/>
    
      <category term="算法" scheme="http://ernestyj.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法" scheme="http://ernestyj.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Merge Intervals - 区间合并]]></title>
    <link href="http://ernestyj.github.io/2015/12/09/Merge%20Intervals%20-%20%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/"/>
    <id>http://ernestyj.github.io/2015/12/09/Merge Intervals - 区间合并/</id>
    <published>2015-12-09T12:44:47.000Z</published>
    <updated>2015-12-09T11:19:53.099Z</updated>
    <content type="html"><![CDATA[<h3 id="Merge_Intervals_-_区间合并">Merge Intervals - 区间合并</h3><p><strong>Description</strong>: Given a collection of intervals, merge all overlapping intervals.</p>
<p> For example,<br> Given [1,3],[2,6],[8,10],[15,18],<br> return [1,6],[8,10],[15,18].</p>
<p>注意：输入集合不一定是按区间首部排序的。</p>
<p>思路：先按区间首部排序，再合并区间。</p>
<p>完整的java代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeIntervals</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Interval&gt; intervals = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">//        intervals.add(new Interval(1, 3));</span></span><br><span class="line"><span class="comment">//        intervals.add(new Interval(2, 6));</span></span><br><span class="line"><span class="comment">//        intervals.add(new Interval(8, 10));</span></span><br><span class="line"><span class="comment">//        intervals.add(new Interval(15, 18));</span></span><br><span class="line">        intervals.add(<span class="keyword">new</span> Interval(<span class="number">1</span>,<span class="number">4</span>));</span><br><span class="line">        intervals.add(<span class="keyword">new</span> Interval(<span class="number">0</span>,<span class="number">4</span>));</span><br><span class="line">        System.out.println(<span class="string">"*****RESULT*****"</span>);</span><br><span class="line">        List&lt;Interval&gt; result = <span class="keyword">new</span> MergeIntervals().merge(intervals);</span><br><span class="line">        <span class="keyword">for</span> (Interval interval : result)&#123;</span><br><span class="line">            System.out.print(<span class="string">"["</span> + interval.start + <span class="string">","</span> + interval.end + <span class="string">"] "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Interval</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> start;</span><br><span class="line">        <span class="keyword">int</span> end;</span><br><span class="line">        Interval() &#123; start = <span class="number">0</span>; end = <span class="number">0</span>; &#125;</span><br><span class="line">        Interval(<span class="keyword">int</span> s, <span class="keyword">int</span> e) &#123; start = s; end = e; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Interval&gt; <span class="title">merge</span><span class="params">(List&lt;Interval&gt; intervals)</span> </span>&#123;</span><br><span class="line">        List&lt;Interval&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (intervals == <span class="keyword">null</span> || intervals.size() == <span class="number">0</span>) <span class="keyword">return</span> result;</span><br><span class="line">        HashMap&lt;Integer, Interval&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Interval interval : intervals)&#123;</span><br><span class="line">            <span class="keyword">if</span> (!map.containsKey(interval.start)) map.put(interval.start, interval);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                Interval oldInterval = map.get(interval.start);</span><br><span class="line">                <span class="keyword">if</span> (oldInterval.end &lt; interval.end)&#123;</span><br><span class="line">                    map.replace(oldInterval.start, interval);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Integer&gt; sortedIntegers = <span class="keyword">new</span> ArrayList&lt;Integer&gt;(map.keySet());</span><br><span class="line">        Collections.sort(sortedIntegers);</span><br><span class="line"></span><br><span class="line">        Interval firstInterval = map.get(sortedIntegers.get(<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">int</span> start = firstInterval.start;</span><br><span class="line">        <span class="keyword">int</span> end = firstInterval.end;</span><br><span class="line">        <span class="keyword">for</span> (Integer i : sortedIntegers)&#123;</span><br><span class="line">            Interval interval = map.get(i);</span><br><span class="line">            <span class="keyword">if</span> (interval.start &gt; end)&#123;</span><br><span class="line">                result.add(<span class="keyword">new</span> Interval(start, end));</span><br><span class="line">                start = interval.start;</span><br><span class="line">                end = interval.end;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (interval.end &gt; end)&#123;</span><br><span class="line">                    end = interval.end;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        result.add(<span class="keyword">new</span> Interval(start, end));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Merge_Intervals_-_区间合并">Merge Intervals - 区间合并</h3><p><strong>Description</strong>: Given a collection of intervals, merge all overl]]>
    </summary>
    
      <category term="LeetCode" scheme="http://ernestyj.github.io/tags/LeetCode/"/>
    
      <category term="java" scheme="http://ernestyj.github.io/tags/java/"/>
    
      <category term="算法" scheme="http://ernestyj.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法" scheme="http://ernestyj.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Jump Game - 跳数游戏]]></title>
    <link href="http://ernestyj.github.io/2015/12/08/Jump%20Game%20-%20%E8%B7%B3%E6%95%B0%E6%B8%B8%E6%88%8F/"/>
    <id>http://ernestyj.github.io/2015/12/08/Jump Game - 跳数游戏/</id>
    <published>2015-12-08T12:44:47.000Z</published>
    <updated>2015-12-08T04:52:00.961Z</updated>
    <content type="html"><![CDATA[<h3 id="Jump_Game_-_跳数游戏">Jump Game - 跳数游戏</h3><p><strong>Description</strong>: Given an array of non-negative integers, you are initially positioned at the first index of the array. Each element in the array represents your maximum jump length at that position. Determine if you are able to reach the last index.</p>
<p> For example:<br> A = [2,3,1,1,4], return true.<br> A = [3,2,1,0,4], return false.</p>
<p>注意与Jump Game II的区别。<br>如果采用DP（复杂度为O(n^2)），大数据测试用例将无法通过。</p>
<p>贪心思路：（复杂度O(n)）<br>用maxLen维护一个从开始位置能到达的最远距离，然后判断<br>     ①在当前位置是否能够到达最后一个位置：(i + nums[i]) &gt;= nums.length - 1<br>     ②当前位置是否可达：maxLen &gt;= i<br>     如果两个条件都满足则返回true；<br>     如果当前位置是0，并且最远距离不能超过当前位置，那么只能返回false；<br>     此外，注意更新最远距离maxLen。</p>
<p>参考：<a href="http://blog.csdn.net/xiaozhuaixifu/article/details/13628465" target="_blank" rel="external">http://blog.csdn.net/xiaozhuaixifu/article/details/13628465</a></p>
<p>完整的java代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JumpGame</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] nums = &#123;<span class="number">5</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">"*****RESULT*****"</span>);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> JumpGame().canJump(nums));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * http://blog.csdn.net/xiaozhuaixifu/article/details/13628465</span><br><span class="line">     * 注意与Jump Game II的区别。</span><br><span class="line">     * 如果采用DP（复杂度为O(n^2)），大数据测试用例将无法通过。</span><br><span class="line">     * 贪心思路：（复杂度O(n)）</span><br><span class="line">     * 用maxLen维护一个从开始位置能到达的最远距离，然后判断</span><br><span class="line">     ①在当前位置是否能够到达最后一个位置：(i + nums[i]) &gt;= nums.length - 1</span><br><span class="line">     ②当前位置是否可达：maxLen &gt;= i</span><br><span class="line">     如果两个条件都满足则返回true；</span><br><span class="line">     如果当前位置是0，并且最远距离不能超过当前位置，那么只能返回false；</span><br><span class="line">     此外，注意更新最远距离maxLen。</span><br><span class="line">     * <span class="doctag">@param</span> nums</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canJump</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.length &lt;= <span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums[<span class="number">0</span>] &gt;= nums.length - <span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums[<span class="number">0</span>] == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span> maxLen = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length - <span class="number">1</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(maxLen &gt;= i &amp;&amp; (i + nums[i]) &gt;= nums.length - <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(maxLen &lt;= i &amp;&amp; nums[i] == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            maxLen = Math.max(i + nums[i], maxLen);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Jump_Game_-_跳数游戏">Jump Game - 跳数游戏</h3><p><strong>Description</strong>: Given an array of non-negative integers, you are initially p]]>
    </summary>
    
      <category term="LeetCode" scheme="http://ernestyj.github.io/tags/LeetCode/"/>
    
      <category term="java" scheme="http://ernestyj.github.io/tags/java/"/>
    
      <category term="算法" scheme="http://ernestyj.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法" scheme="http://ernestyj.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Spiral Matrix - 螺旋矩阵]]></title>
    <link href="http://ernestyj.github.io/2015/12/07/Spiral%20Matrix%20-%20%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5/"/>
    <id>http://ernestyj.github.io/2015/12/07/Spiral Matrix - 螺旋矩阵/</id>
    <published>2015-12-07T12:44:47.000Z</published>
    <updated>2015-12-08T04:48:55.435Z</updated>
    <content type="html"><![CDATA[<h3 id="Spiral_Matrix_-_螺旋矩阵">Spiral Matrix - 螺旋矩阵</h3><p><strong>Description</strong>: Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.</p>
<p> For example,<br> Given the following matrix:<br> [<br> [ 1, 2, 3 ],<br> [ 4, 5, 6 ],<br> [ 7, 8, 9 ]<br> ]<br> You should return [1,2,3,6,9,8,7,4,5].</p>
<p>注意：若只剩下一行/列，则只处理此行/列，其余按circle方式处理。<br>参考：<a href="http://www.programcreek.com/2013/01/leetcode-spiral-matrix-java/" target="_blank" rel="external">http://www.programcreek.com/2013/01/leetcode-spiral-matrix-java/</a></p>
<p>完整的java代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpiralMatrix</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[][] matrix = &#123; &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;, &#123;<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125; &#125;;</span><br><span class="line">        System.out.println(<span class="string">"*****RESULT*****"</span>);</span><br><span class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> SpiralMatrix().spiralOrder(matrix);</span><br><span class="line">        <span class="keyword">for</span> (Integer i : result) System.out.print(i + <span class="string">" "</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 若只剩下一行/列，则只处理此行/列，其余按circle方式处理</span><br><span class="line">     * http://www.programcreek.com/2013/01/leetcode-spiral-matrix-java/</span><br><span class="line">     * <span class="doctag">@param</span> matrix</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">spiralOrder</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">if</span>(matrix == <span class="keyword">null</span> || matrix.length == <span class="number">0</span>) <span class="keyword">return</span> result;</span><br><span class="line">        <span class="keyword">int</span> m = matrix.length;</span><br><span class="line">        <span class="keyword">int</span> n = matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">int</span> x=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> y=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(m&gt;<span class="number">0</span> &amp;&amp; n&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//if one row/column left, no circle can be formed</span></span><br><span class="line">            <span class="keyword">if</span>(m==<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) result.add(matrix[x][y++]);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++) result.add(matrix[x++][y]);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//below, process a circle</span></span><br><span class="line">            <span class="comment">//top - move right</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n-<span class="number">1</span>;i++) result.add(matrix[x][y++]);</span><br><span class="line">            <span class="comment">//right - move down</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m-<span class="number">1</span>;i++) result.add(matrix[x++][y]);</span><br><span class="line">            <span class="comment">//bottom - move left</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n-<span class="number">1</span>;i++) result.add(matrix[x][y--]);</span><br><span class="line">            <span class="comment">//left - move up</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m-<span class="number">1</span>;i++) result.add(matrix[x--][y]);</span><br><span class="line">            x++;</span><br><span class="line">            y++;</span><br><span class="line">            m=m-<span class="number">2</span>;</span><br><span class="line">            n=n-<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Spiral_Matrix_-_螺旋矩阵">Spiral Matrix - 螺旋矩阵</h3><p><strong>Description</strong>: Given a matrix of m x n elements (m rows, n columns)]]>
    </summary>
    
      <category term="LeetCode" scheme="http://ernestyj.github.io/tags/LeetCode/"/>
    
      <category term="java" scheme="http://ernestyj.github.io/tags/java/"/>
    
      <category term="算法" scheme="http://ernestyj.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法" scheme="http://ernestyj.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Maximum Subarray - 最大子串]]></title>
    <link href="http://ernestyj.github.io/2015/12/06/Maximum%20Subarray%20-%20%E6%9C%80%E5%A4%A7%E5%AD%90%E4%B8%B2/"/>
    <id>http://ernestyj.github.io/2015/12/06/Maximum Subarray - 最大子串/</id>
    <published>2015-12-06T12:44:47.000Z</published>
    <updated>2015-12-08T04:46:49.063Z</updated>
    <content type="html"><![CDATA[<h3 id="Maximum_Subarray_-_最大子串">Maximum Subarray - 最大子串</h3><p><strong>Description</strong>: Find the contiguous subarray within an array (containing at least one number) which has the largest sum.</p>
<p> For example, given the array [−2,1,−3,4,−1,2,1,−5,4],<br> the contiguous subarray [4,−1,2,1] has the largest sum = 6.</p>
<p>思路：动态规划。</p>
<p>完整的java代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaximumSubarray</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] nums = &#123;-<span class="number">2</span>,<span class="number">1</span>,-<span class="number">3</span>,<span class="number">4</span>,-<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,-<span class="number">5</span>,<span class="number">4</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">"*****RESULT*****"</span>);</span><br><span class="line">        <span class="keyword">int</span> result = <span class="keyword">new</span> MaximumSubarray().maxSubArray(nums);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> len = nums.length;</span><br><span class="line">        <span class="keyword">int</span> local = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> global = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt; len; k++)&#123;</span><br><span class="line">            <span class="comment">//TODO 注意不是Math.max(local + nums[k], local);</span></span><br><span class="line">            <span class="comment">//若local + nums[k] &lt; nums[k]则直接抛弃k前面的所有数</span></span><br><span class="line">            local = Math.max(local + nums[k], nums[k]);</span><br><span class="line">            global = Math.max(local, global);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> global;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Maximum_Subarray_-_最大子串">Maximum Subarray - 最大子串</h3><p><strong>Description</strong>: Find the contiguous subarray within an array (]]>
    </summary>
    
      <category term="LeetCode" scheme="http://ernestyj.github.io/tags/LeetCode/"/>
    
      <category term="java" scheme="http://ernestyj.github.io/tags/java/"/>
    
      <category term="算法" scheme="http://ernestyj.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法" scheme="http://ernestyj.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[N Queens - 皇后问题]]></title>
    <link href="http://ernestyj.github.io/2015/12/04/N%20Queens%20-%20%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98/"/>
    <id>http://ernestyj.github.io/2015/12/04/N Queens - 皇后问题/</id>
    <published>2015-12-04T12:44:47.000Z</published>
    <updated>2015-12-06T01:56:26.600Z</updated>
    <content type="html"><![CDATA[<h3 id="N_Queens_-_皇后问题">N Queens - 皇后问题</h3><p><strong>Description</strong>: Given an integer n, return all distinct solutions to the n-queens puzzle.</p>
<p>Each solution contains a distinct board configuration of the n-queens’ placement, where ‘Q’ and ‘.’ both indicate a queen and an empty space respectively.</p>
<p>皇后问题：每一个的横竖斜都没有其他皇后。</p>
<p>思路：回溯法。<br>关键：每一行只能有一个皇后，用一维数组存每行皇后所在列。用一维数组则在回溯的时候不需进行remove重置操作，因为回溯正好就回到上一行，可以接着找下一个合法列坐标。走完最后一行，坐标（row，colVal[row]）即皇后坐标。<br>参考：<a href="http://www.cnblogs.com/springfor/p/3870944.html" target="_blank" rel="external">http://www.cnblogs.com/springfor/p/3870944.html</a></p>
<p>完整的java代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NQueens</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"*****RESULT*****"</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * http://www.cnblogs.com/springfor/p/3870944.html</span><br><span class="line">     * 回溯法</span><br><span class="line">     * 关键：每一行只能有一个皇后，用一维数组存每行皇后所在列。</span><br><span class="line">     * 用一维数组则在回溯的时候不需进行remove重置操作，因为回溯正好就回到上一行，可以接着找下一个合法列坐标。</span><br><span class="line">     * 走完最后一行，坐标（row，colVal[row]）即皇后坐标。</span><br><span class="line">     * <span class="doctag">@param</span> n</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; solveNQueens(<span class="keyword">int</span> n) &#123;</span><br><span class="line">        ArrayList&lt;List&lt;String&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line">        <span class="keyword">int</span> [] colVal = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        dfsHelper(n, res, <span class="number">0</span>, colVal);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfsHelper</span><span class="params">(<span class="keyword">int</span> n, List&lt;List&lt;String&gt;&gt; res, <span class="keyword">int</span> row, <span class="keyword">int</span>[] colVal)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(row == n)&#123;</span><br><span class="line">            List&lt;String&gt; aSolution = <span class="keyword">new</span> ArrayList&lt;&gt;(n);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">                StringBuilder s = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(j == colVal[i]) s.append(<span class="string">"Q"</span>);</span><br><span class="line">                    <span class="keyword">else</span> s.append(<span class="string">"."</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                aSolution.add(s.toString());</span><br><span class="line">            &#125;</span><br><span class="line">            res.add(aSolution);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">                colVal[row] = i;    <span class="comment">//(row,i)</span></span><br><span class="line">                <span class="keyword">if</span>(isValid(row, colVal)) dfsHelper(n, res, row + <span class="number">1</span>, colVal);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//对角线的判断就是两点行差值和列差值是否相同</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> [] colVal)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(colVal[row] == colVal[i] || Math.abs(colVal[row] - colVal[i]) == Math.abs(row - i))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="N_Queens_-_皇后问题">N Queens - 皇后问题</h3><p><strong>Description</strong>: Given an integer n, return all distinct solutions to the n-que]]>
    </summary>
    
      <category term="LeetCode" scheme="http://ernestyj.github.io/tags/LeetCode/"/>
    
      <category term="java" scheme="http://ernestyj.github.io/tags/java/"/>
    
      <category term="算法" scheme="http://ernestyj.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法" scheme="http://ernestyj.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Eugene's Blog]]></title>
  <subtitle><![CDATA[成长之旅]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://eugeneyang.com/"/>
  <updated>2016-05-26T14:05:48.385Z</updated>
  <id>http://eugeneyang.com/</id>
  
  <author>
    <name><![CDATA[Jian Yang]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Word Pattern - 单词模式]]></title>
    <link href="http://eugeneyang.com/2016/05/26/Word%20Pattern%20-%20%E5%8D%95%E8%AF%8D%E6%A8%A1%E5%BC%8F/"/>
    <id>http://eugeneyang.com/2016/05/26/Word Pattern - 单词模式/</id>
    <published>2016-05-26T12:44:47.000Z</published>
    <updated>2016-05-26T14:05:48.385Z</updated>
    <content type="html"><![CDATA[<h3 id="Word_Pattern_-_单词模式">Word Pattern - 单词模式</h3><p><strong>Description</strong>: Given a pattern and a string str, find if str follows the same pattern.</p>
<p>Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in str.</p>
<p>Examples:<br>pattern = “abba”, str = “dog cat cat dog” should return true.<br>pattern = “abba”, str = “dog cat cat fish” should return false.<br>pattern = “aaaa”, str = “dog cat cat dog” should return false.<br>pattern = “abba”, str = “dog dog dog dog” should return false.<br>Notes:<br>You may assume pattern contains only lowercase letters, and str contains lowercase letters separated by a single space.</p>
<p>思路：一、借助哈希与集合；<br>二、注意哈希表put方法会返回前一次放入的值，根据这个特点简化代码。</p>
<p>完整的java代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordPattern</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//简洁</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">wordPattern</span><span class="params">(String pattern, String str)</span> </span>&#123;</span><br><span class="line">        String[] strings = str.split(<span class="string">" "</span>);</span><br><span class="line">        <span class="keyword">if</span> (strings.length != pattern.length()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        HashMap index = <span class="keyword">new</span> HashMap();</span><br><span class="line">        <span class="keyword">for</span> (Integer i=<span class="number">0</span>; i&lt;strings.length; ++i)&#123;   <span class="comment">//TODO Integer不能写成int</span></span><br><span class="line">            <span class="keyword">if</span> (index.put(pattern.charAt(i), i) != index.put(strings[i], i))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">wordPattern1</span><span class="params">(String pattern, String str)</span> </span>&#123;</span><br><span class="line">        String[] strings = str.split(<span class="string">" "</span>);</span><br><span class="line">        <span class="keyword">if</span> (pattern.length()!=strings.length) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        HashMap&lt;Character, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        HashSet&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;pattern.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">char</span> c = pattern.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (!map.containsKey(c)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!set.contains(strings[i])) &#123;</span><br><span class="line">                    map.put(c, strings[i]);</span><br><span class="line">                    set.add(strings[i]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!map.get(c).equals(strings[i])) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Word_Pattern_-_单词模式">Word Pattern - 单词模式</h3><p><strong>Description</strong>: Given a pattern and a string str, find if str follows ]]>
    </summary>
    
      <category term="LeetCode" scheme="http://eugeneyang.com/tags/LeetCode/"/>
    
      <category term="java" scheme="http://eugeneyang.com/tags/java/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/categories/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Game of Life - 生命游戏]]></title>
    <link href="http://eugeneyang.com/2016/05/25/Game%20of%20Life%20-%20%E7%94%9F%E5%91%BD%E6%B8%B8%E6%88%8F/"/>
    <id>http://eugeneyang.com/2016/05/25/Game of Life - 生命游戏/</id>
    <published>2016-05-25T12:44:47.000Z</published>
    <updated>2016-05-26T14:05:48.383Z</updated>
    <content type="html"><![CDATA[<h3 id="Game_of_Life_-_生命游戏">Game of Life - 生命游戏</h3><p><strong>Description</strong>: According to the Wikipedia’s article: “The Game of Life, also known simply as Life, is a cellular automaton devised by the British mathematician John Horton Conway in 1970.”</p>
<p>Given a board with m by n cells, each cell has an initial state live (1) or dead (0). Each cell interacts with its eight neighbors (horizontal, vertical, diagonal) using the following four rules (taken from the above Wikipedia article):<br>Any live cell with fewer than two live neighbors dies, as if caused by under-population.<br>Any live cell with two or three live neighbors lives on to the next generation.<br>Any live cell with more than three live neighbors dies, as if by over-population..<br>Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.<br>Write a function to compute the next state (after one update) of the board given its current state.</p>
<p>Follow up:<br>Could you solve it in-place? Remember that the board needs to be updated at the same time: You cannot update some cells first and then use their updated values to update other cells.<br>In this question, we represent the board using a 2D array. In principle, the board is infinite, which would cause problems when the active area encroaches the border of the array. How would you address these problems?</p>
<p>思路：要求in-place替换，可以采用有限状态机。<br>状态0： 死细胞转为死细胞<br>     状态1： 活细胞转为活细胞<br>     状态2： 活细胞转为死细胞<br>     状态3： 死细胞转为活细胞<br>     最后我们对所有状态对2取余，那么状态0和2就变成死细胞，状态1和3就是活细胞.</p>
<p>完整的java代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] dir =&#123;&#123;<span class="number">1</span>,-<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,-<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;-<span class="number">1</span>,-<span class="number">1</span>&#125;,&#123;-<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;-<span class="number">1</span>,<span class="number">1</span>&#125;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">gameOfLife</span><span class="params">(<span class="keyword">int</span>[][] board)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m = board.length, n = board[<span class="number">0</span>].length;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++)&#123;</span><br><span class="line">            <span class="keyword">int</span> live=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span>[] d:dir)&#123;</span><br><span class="line">                <span class="keyword">if</span>(d[<span class="number">0</span>]+i&lt;<span class="number">0</span> || d[<span class="number">0</span>]+i&gt;=m || d[<span class="number">1</span>]+j&lt;<span class="number">0</span> || d[<span class="number">1</span>]+j&gt;=n) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span>(board[d[<span class="number">0</span>]+i][d[<span class="number">1</span>]+j]==<span class="number">1</span> || board[d[<span class="number">0</span>]+i][d[<span class="number">1</span>]+j]==<span class="number">2</span>) live++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(board[i][j]==<span class="number">0</span> &amp;&amp; live==<span class="number">3</span>) board[i][j]=<span class="number">3</span>;</span><br><span class="line">            <span class="keyword">if</span>(board[i][j]==<span class="number">1</span> &amp;&amp; (live&lt;<span class="number">2</span> || live&gt;<span class="number">3</span>)) board[i][j]=<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">            board[i][j] %= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Game_of_Life_-_生命游戏">Game of Life - 生命游戏</h3><p><strong>Description</strong>: According to the Wikipedia’s article: “The Game of Lif]]>
    </summary>
    
      <category term="LeetCode" scheme="http://eugeneyang.com/tags/LeetCode/"/>
    
      <category term="java" scheme="http://eugeneyang.com/tags/java/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/categories/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Find the Duplicate Number - 找到重复值]]></title>
    <link href="http://eugeneyang.com/2016/05/24/Find%20the%20Duplicate%20Number%20-%20%E6%89%BE%E5%88%B0%E9%87%8D%E5%A4%8D%E5%80%BC/"/>
    <id>http://eugeneyang.com/2016/05/24/Find the Duplicate Number - 找到重复值/</id>
    <published>2016-05-24T12:44:47.000Z</published>
    <updated>2016-05-26T14:05:48.381Z</updated>
    <content type="html"><![CDATA[<h3 id="Find_the_Duplicate_Number_-_找到重复值">Find the Duplicate Number - 找到重复值</h3><p><strong>Description</strong>: Given an array nums containing n + 1 integers where each integer is between 1 and n (inclusive), prove that at least one duplicate number must exist. Assume that there is only one duplicate number, find the duplicate one.</p>
<p>Note: You must not modify the array (assume the array is read only).<br>You must use only constant, O(1) extra space.<br>Your runtime complexity should be less than O(n2).<br>There is only one duplicate number in the array, but it could be repeated more than once.</p>
<p>思路：一、二分法：注意与中点序号比较的是count值。时间O(NlogN),空间O(1)<br>二、环路法：将数组下标与其值映射起来,若有重复值,则连续映射下去会出现环路,环路的起点就是重复值.<br>具体做法：用快慢两个下标都从0开始，快下标每轮映射两次，慢下标每轮映射一次，直到两个下标再次相同。保持慢下标位置不变，再用一个新的下标从0开始，这两个下标都继续每轮映射一次，当这两个下标相遇时，就是环的起点(重复的数)。</p>
<p>参考链接：详细解释参考 <a href="https://segmentfault.com/a/1190000003817671" target="_blank" rel="external">https://segmentfault.com/a/1190000003817671</a></p>
<p>完整的java代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FindTheDuplicateNumber</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 详细解释参考 https://segmentfault.com/a/1190000003817671</span><br><span class="line">     * 时间O(N),空间 O(1).</span><br><span class="line">     * 将数组下标与其值映射起来,若有重复值,则连续映射下去会出现环路,环路的起点就是重复值.</span><br><span class="line">     用快慢两个下标都从0开始，快下标每轮映射两次，慢下标每轮映射一次，直到两个下标再次相同。保持慢下标位置不变，</span><br><span class="line">     再用一个新的下标从0开始，这两个下标都继续每轮映射一次，当这两个下标相遇时，就是环的起点(重复的数)。</span><br><span class="line">     * <span class="doctag">@param</span> nums</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findDuplicate</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> slow = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> fast = nums[nums[<span class="number">0</span>]];</span><br><span class="line">        <span class="keyword">while</span> (slow!=fast)&#123;</span><br><span class="line">            slow = nums[slow];</span><br><span class="line">            fast = nums[nums[fast]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (slow!=i)&#123;</span><br><span class="line">            slow = nums[slow];</span><br><span class="line">            i = nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//时间O(NlogN),空间O(1).二分法:注意与中点序号比较的是count值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findDuplicate1</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>, r = nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (l&lt;=r)&#123;</span><br><span class="line">            <span class="keyword">int</span> m = l+(r-l)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nums.length; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[i]&lt;=m) count++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (count&lt;=m) l = m+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> r = m-<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//brute force</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findDuplicate2</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = nums.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;len; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[i]==nums[j]) <span class="keyword">return</span> nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Find_the_Duplicate_Number_-_找到重复值">Find the Duplicate Number - 找到重复值</h3><p><strong>Description</strong>: Given an array nums contai]]>
    </summary>
    
      <category term="LeetCode" scheme="http://eugeneyang.com/tags/LeetCode/"/>
    
      <category term="java" scheme="http://eugeneyang.com/tags/java/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/categories/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Peeking Iterator]]></title>
    <link href="http://eugeneyang.com/2016/05/23/Peeking%20Iterator/"/>
    <id>http://eugeneyang.com/2016/05/23/Peeking Iterator/</id>
    <published>2016-05-23T12:44:47.000Z</published>
    <updated>2016-05-26T14:05:48.378Z</updated>
    <content type="html"><![CDATA[<h3 id="Peeking_Iterator">Peeking Iterator</h3><p><strong>Description</strong>: Given an Iterator class interface with methods: next() and hasNext(), design and implement a PeekingIterator that support the peek() operation – it essentially peek() at the element that will be returned by the next call to next().</p>
<p>思路：提前取出下一个元素。</p>
<p>完整的java代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PeekingIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer next = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> Iterator&lt;Integer&gt; iterator = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PeekingIterator</span><span class="params">(Iterator&lt;Integer&gt; iterator)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// initialize any member here.</span></span><br><span class="line">        <span class="keyword">this</span>.iterator = iterator;</span><br><span class="line">        <span class="keyword">if</span> (iterator.hasNext()) <span class="keyword">this</span>.next = iterator.next();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Returns the next element in the iteration without advancing the iterator.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// hasNext() and next() should behave the same as in the Iterator interface.</span></span><br><span class="line">    <span class="comment">// Override them if needed.</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Integer temp = next;</span><br><span class="line">        <span class="keyword">if</span> (iterator.hasNext()) next = iterator.next();</span><br><span class="line">        <span class="keyword">else</span> next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> next==<span class="keyword">null</span>? <span class="keyword">false</span> : <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Peeking_Iterator">Peeking Iterator</h3><p><strong>Description</strong>: Given an Iterator class interface with methods: next() and h]]>
    </summary>
    
      <category term="LeetCode" scheme="http://eugeneyang.com/tags/LeetCode/"/>
    
      <category term="java" scheme="http://eugeneyang.com/tags/java/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/categories/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Move Zeroes - 移除零]]></title>
    <link href="http://eugeneyang.com/2016/05/22/Move%20Zeroes%20-%20%E7%A7%BB%E9%99%A4%E9%9B%B6/"/>
    <id>http://eugeneyang.com/2016/05/22/Move Zeroes - 移除零/</id>
    <published>2016-05-22T12:44:47.000Z</published>
    <updated>2016-05-26T14:05:48.375Z</updated>
    <content type="html"><![CDATA[<h3 id="Move_Zeroes_-_移除零">Move Zeroes - 移除零</h3><p><strong>Description</strong>: Given an array nums, write a function to move all 0’s to the end of it while maintaining the relative order of the non-zero elements.</p>
<p>For example, given nums = [0, 1, 0, 3, 12], after calling your function, nums should be [1, 3, 12, 0, 0].</p>
<p>Note: You must do this in-place without making a copy of the array.<br> Minimize the total number of operations.</p>
<p>思路：一、双指针；<br>二、将非零值靠前移动，余下的填充零。</p>
<p>完整的java代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MoveZeroes</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Shift non-zero values as far forward as possible. Fill remaining space with zeros</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">moveZeroes</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums==<span class="keyword">null</span> || nums.length==<span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num: nums) &#123;</span><br><span class="line">            <span class="keyword">if</span> (num!=<span class="number">0</span>) nums[i++] = num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (i&lt;nums.length) &#123;</span><br><span class="line">            nums[i++] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//双指针</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">moveZeroes1</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i]==<span class="number">0</span>) &#123;</span><br><span class="line">                j = i+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> (j&lt;nums.length &amp;&amp; nums[j]==<span class="number">0</span>) j++;</span><br><span class="line">                <span class="keyword">if</span> (j&lt;nums.length) swap(nums, i, j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = nums[i];</span><br><span class="line">        nums[i] = nums[j];</span><br><span class="line">        nums[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Move_Zeroes_-_移除零">Move Zeroes - 移除零</h3><p><strong>Description</strong>: Given an array nums, write a function to move all 0’s to t]]>
    </summary>
    
      <category term="LeetCode" scheme="http://eugeneyang.com/tags/LeetCode/"/>
    
      <category term="java" scheme="http://eugeneyang.com/tags/java/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/categories/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Expression Add Operators - 表达式添加操作符]]></title>
    <link href="http://eugeneyang.com/2016/05/21/Expression%20Add%20Operators%20-%20%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B7%BB%E5%8A%A0%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
    <id>http://eugeneyang.com/2016/05/21/Expression Add Operators - 表达式添加操作符/</id>
    <published>2016-05-21T12:44:47.000Z</published>
    <updated>2016-05-26T14:05:48.373Z</updated>
    <content type="html"><![CDATA[<h3 id="Expression_Add_Operators_-_表达式添加操作符">Expression Add Operators - 表达式添加操作符</h3><p><strong>Description</strong>: Given a string that contains only digits 0-9 and a target value, return all possibilities to add binary operators (not unary) +, -, or * between the digits so they evaluate to the target value.</p>
<p>Examples:<br> “123”, 6 -&gt; [“1+2+3”, “1<em>2</em>3”]<br> “232”, 8 -&gt; [“2<em>3+2”, “2+3</em>2”]<br> “105”, 5 -&gt; [“1<em>0+5”,”10-5”]<br> “00”, 0 -&gt; [“0+0”, “0-0”, “0</em>0”]<br> “3456237490”, 9191 -&gt; []</p>
<p>思路：回溯:注意边界情况1.用long存储计算结果;2.零开头的数字应忽略. 注意乘法优先级,用一个变量暂存相乘的结果.</p>
<p>参考链接：<a href="https://leetcode.com/discuss/58614/java-standard-backtrace-ac-solutoin-short-and-clear" target="_blank" rel="external">https://leetcode.com/discuss/58614/java-standard-backtrace-ac-solutoin-short-and-clear</a></p>
<p>完整的java代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExpressionAddOperators</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * https://leetcode.com/discuss/58614/java-standard-backtrace-ac-solutoin-short-and-clear</span><br><span class="line">     * 回溯:注意边界情况1.用long存储计算结果;2.零开头的数字应忽略. 注意乘法优先级,用一个变量暂存相乘的结果.</span><br><span class="line">     * <span class="doctag">@param</span> num</span><br><span class="line">     * <span class="doctag">@param</span> target</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">addOperators</span><span class="params">(String num, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(num==<span class="keyword">null</span> || num.length()==<span class="number">0</span>) <span class="keyword">return</span> result;</span><br><span class="line">        helper(num, target, <span class="number">0</span>, <span class="string">""</span>, result, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">helper</span><span class="params">(String num, <span class="keyword">int</span> target, <span class="keyword">int</span> start, String path, List&lt;String&gt; result,</span><br><span class="line">                        <span class="keyword">long</span> eval, <span class="keyword">long</span> multed)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (start==num.length())&#123;</span><br><span class="line">            <span class="keyword">if</span> (target==eval) result.add(path);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=start; i&lt;num.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (num.charAt(start)==<span class="string">'0'</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span> (i!=start) <span class="keyword">break</span>;    <span class="comment">//零开头的数字应忽略</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">long</span> x = Long.parseLong(num.substring(start, i+<span class="number">1</span>));</span><br><span class="line">            <span class="keyword">if</span> (start==<span class="number">0</span>)</span><br><span class="line">                helper(num, target, i+<span class="number">1</span>, path+x, result, x, x);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                helper(num, target, i+<span class="number">1</span>, path+<span class="string">"+"</span>+x, result, eval+x, x);</span><br><span class="line">                helper(num, target, i+<span class="number">1</span>, path+<span class="string">"-"</span>+x, result, eval-x, -x);</span><br><span class="line">                <span class="comment">//减去之前操作的,再加上相乘值</span></span><br><span class="line">                helper(num, target, i+<span class="number">1</span>, path+<span class="string">"*"</span>+x, result, eval-multed+multed*x, multed*x);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Expression_Add_Operators_-_表达式添加操作符">Expression Add Operators - 表达式添加操作符</h3><p><strong>Description</strong>: Given a string that co]]>
    </summary>
    
      <category term="LeetCode" scheme="http://eugeneyang.com/tags/LeetCode/"/>
    
      <category term="java" scheme="http://eugeneyang.com/tags/java/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/categories/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Perfect Squares - 完美平方数]]></title>
    <link href="http://eugeneyang.com/2016/05/20/Perfect%20Squares%20-%20%E5%AE%8C%E7%BE%8E%E5%B9%B3%E6%96%B9%E6%95%B0/"/>
    <id>http://eugeneyang.com/2016/05/20/Perfect Squares - 完美平方数/</id>
    <published>2016-05-20T12:44:47.000Z</published>
    <updated>2016-05-26T14:05:48.371Z</updated>
    <content type="html"><![CDATA[<h3 id="Perfect_Squares_-_完美平方数">Perfect Squares - 完美平方数</h3><p><strong>Description</strong>: Given a positive integer n, find the least number of perfect square numbers (for example, 1, 4, 9, 16, …) which sum to n.</p>
<p>For example, given n = 12, return 3 because 12 = 4 + 4 + 4; given n = 13, return 2 because 13 = 4 + 9.</p>
<p>思路：DP: dp[k] = Min{ dp[k-i<em>i]+1 },  n-i</em>i&gt;=0 &amp;&amp; i&gt;=1</p>
<p>参考链接：<a href="https://leetcode.com/discuss/62526/an-easy-understanding-dp-solution-in-java" target="_blank" rel="external">https://leetcode.com/discuss/62526/an-easy-understanding-dp-solution-in-java</a></p>
<p>完整的java代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numSquares</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">1</span>; k&lt;=n; k++)&#123;</span><br><span class="line">        dp[k] = dp[k-<span class="number">1</span>]+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span> (k-i*i&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = dp[k-i*i]+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (temp&lt;dp[k]) dp[k] = temp;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Perfect_Squares_-_完美平方数">Perfect Squares - 完美平方数</h3><p><strong>Description</strong>: Given a positive integer n, find the least num]]>
    </summary>
    
      <category term="LeetCode" scheme="http://eugeneyang.com/tags/LeetCode/"/>
    
      <category term="java" scheme="http://eugeneyang.com/tags/java/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/categories/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[First Bad Version - 第一个坏版本]]></title>
    <link href="http://eugeneyang.com/2016/05/19/First%20Bad%20Version%20-%20%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%9D%8F%E7%89%88%E6%9C%AC/"/>
    <id>http://eugeneyang.com/2016/05/19/First Bad Version - 第一个坏版本/</id>
    <published>2016-05-19T12:44:47.000Z</published>
    <updated>2016-05-26T14:05:48.369Z</updated>
    <content type="html"><![CDATA[<h3 id="First_Bad_Version_-_第一个坏版本">First Bad Version - 第一个坏版本</h3><p><strong>Description</strong>: You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.</p>
<p>Suppose you have n versions [1, 2, …, n] and you want to find out the first bad one, which causes all the following ones to be bad.</p>
<p>You are given an API bool isBadVersion(version) which will return whether version is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.</p>
<p>思路：二分法，注意m = (l+r)/2与m = l+(r-l)/2的区别,后者可以避免溢出</p>
<p>完整的java代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> <span class="keyword">extends</span> <span class="title">VersionControl</span> </span>&#123;</span><br><span class="line">       <span class="comment">//简洁</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">firstBadVersion1</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">int</span> l = <span class="number">1</span>, r = n;</span><br><span class="line">           <span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line">           <span class="keyword">while</span> (l&lt;r)&#123;    <span class="comment">//TODO 注意不是l&lt;=r</span></span><br><span class="line">               m = l+(r-l)/<span class="number">2</span>;</span><br><span class="line">               <span class="keyword">if</span> (isBadVersion(m))&#123;</span><br><span class="line">                   r = m;</span><br><span class="line">               &#125; <span class="keyword">else</span></span><br><span class="line">                   l = m+<span class="number">1</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> l;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">firstBadVersion</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">int</span> l = <span class="number">1</span>, r = n;</span><br><span class="line">           <span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line">           <span class="keyword">int</span> result = n;</span><br><span class="line">           <span class="keyword">while</span> (l&lt;=r)&#123;</span><br><span class="line">               m = l+(r-l)/<span class="number">2</span>;    <span class="comment">//TODO 不能使用m = (l+r)/2, 否则会溢出</span></span><br><span class="line">               <span class="keyword">if</span> (isBadVersion(m))&#123;</span><br><span class="line">                   <span class="keyword">if</span> (result&gt;m) result = m;</span><br><span class="line">                   r = m-<span class="number">1</span>;</span><br><span class="line">               &#125; <span class="keyword">else</span></span><br><span class="line">                   l = m+<span class="number">1</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> result;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="First_Bad_Version_-_第一个坏版本">First Bad Version - 第一个坏版本</h3><p><strong>Description</strong>: You are a product manager and currently ]]>
    </summary>
    
      <category term="LeetCode" scheme="http://eugeneyang.com/tags/LeetCode/"/>
    
      <category term="java" scheme="http://eugeneyang.com/tags/java/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/categories/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[H-Index II - H指数II]]></title>
    <link href="http://eugeneyang.com/2016/05/18/H-Index%20II%20-%20H%E6%8C%87%E6%95%B0II/"/>
    <id>http://eugeneyang.com/2016/05/18/H-Index II - H指数II/</id>
    <published>2016-05-18T12:44:47.000Z</published>
    <updated>2016-05-26T14:05:48.367Z</updated>
    <content type="html"><![CDATA[<h3 id="H-Index_II_-_H指数II">H-Index II - H指数II</h3><p><strong>Description</strong>: Follow up for H-Index: What if the citations array is sorted in ascending order? Could you optimize your algorithm?</p>
<p>Hint: Expected runtime complexity is in O(log n) and the input is sorted.</p>
<p>思路：一、二分法, O(log n)<br>二、顺序遍历，O(n)</p>
<p>参考链接：<a href="https://segmentfault.com/a/1190000003794831" target="_blank" rel="external">https://segmentfault.com/a/1190000003794831</a></p>
<p>完整的java代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HIndexII</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * https://segmentfault.com/a/1190000003794831</span><br><span class="line">     * 二分法, O(log n)</span><br><span class="line">     * <span class="doctag">@param</span> citations</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hIndex</span><span class="params">(<span class="keyword">int</span>[] citations)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> N = citations.length;</span><br><span class="line">        <span class="keyword">if</span>(N==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>, r = citations.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l &lt;= r)&#123;</span><br><span class="line">            <span class="keyword">int</span> m = (l+r)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(citations[m] &lt; N-m)&#123; <span class="comment">// 如果该点是有效的H指数，则最大H指数一定在右边</span></span><br><span class="line">                l = m+<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (citations[m] == N-m)</span><br><span class="line">                <span class="keyword">return</span> N-m;</span><br><span class="line">            <span class="keyword">else</span> &#123;    <span class="comment">// 否则最大H指数在左边</span></span><br><span class="line">                r = m-<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> N-l; <span class="comment">// TODO 注意返回值是N-l, N-l是l点的H指数</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//O(n)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hIndex1</span><span class="params">(<span class="keyword">int</span>[] citations)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> N = citations.length;</span><br><span class="line">        <span class="keyword">if</span> (N&lt;<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> h = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> currH = Math.min(citations[i], N-i);  <span class="comment">//得到当前的H指数,不是citations[i]就是len-i</span></span><br><span class="line">            <span class="keyword">if</span>(currH&gt;h) h = currH;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> h;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="H-Index_II_-_H指数II">H-Index II - H指数II</h3><p><strong>Description</strong>: Follow up for H-Index: What if the citations array is so]]>
    </summary>
    
      <category term="LeetCode" scheme="http://eugeneyang.com/tags/LeetCode/"/>
    
      <category term="java" scheme="http://eugeneyang.com/tags/java/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/categories/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[H-Index - H指数]]></title>
    <link href="http://eugeneyang.com/2016/05/17/H-Index%20-%20H%E6%8C%87%E6%95%B0/"/>
    <id>http://eugeneyang.com/2016/05/17/H-Index - H指数/</id>
    <published>2016-05-17T12:44:47.000Z</published>
    <updated>2016-05-26T14:05:48.365Z</updated>
    <content type="html"><![CDATA[<h3 id="H-Index_-_H指数">H-Index - H指数</h3><p><strong>Description</strong>: Given an array of citations (each citation is a non-negative integer) of a researcher, write a function to compute the researcher’s h-index. According to the definition of h-index on Wikipedia: “A scientist has index h<br> if h of his/her N papers have at least h citations each, and the other N − h papers have no more than h citations each.”</p>
<p> For example, given citations = [3, 0, 6, 1, 5], which means the researcher has 5 papers in total and each of them had received 3, 0, 6, 1, 5 citations respectively. Since the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, his h-index is 3.</p>
<p> Note: If there are several possible values for h, the maximum one is taken as the h-index.</p>
<p>思路：一、借助额外数组, 时间O(N), 空间O(N)<br>二、先排序, 时间O(NlogN), 空间O(1)</p>
<p>参考链接：<a href="https://segmentfault.com/a/1190000003794831" target="_blank" rel="external">https://segmentfault.com/a/1190000003794831</a></p>
<p>完整的java代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HIndex</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//https://segmentfault.com/a/1190000003794831</span></span><br><span class="line">    <span class="comment">//借助额外数组, 时间O(N), 空间O(N)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hIndex</span><span class="params">(<span class="keyword">int</span>[] citations)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> N = citations.length;</span><br><span class="line">        <span class="keyword">if</span>(N&lt;<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//counts[i]表示有多少文章被引用了i次，这里如果一篇文章引用大于N次，我们就将其当为N次，因为H指数不会超过文章的总数。</span></span><br><span class="line">        <span class="keyword">int</span>[] counts = <span class="keyword">new</span> <span class="keyword">int</span>[N+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> cit: citations) &#123;</span><br><span class="line">            <span class="keyword">if</span>(cit&gt;N) counts[N]++;</span><br><span class="line">            <span class="keyword">else</span> counts[cit]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//如果遍历到某一个引用次数时，大于或等于该引用次数的文章数量&gt;=引用次数本身，则认为这是H指数。</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=N; k&gt;=<span class="number">0</span>; k--) &#123;</span><br><span class="line">            sum += counts[k];</span><br><span class="line">            <span class="keyword">if</span>(sum&gt;=k) <span class="keyword">return</span> k;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//先排序, 时间O(NlogN), 空间O(1)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hIndex1</span><span class="params">(<span class="keyword">int</span>[] citations)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = citations.length;</span><br><span class="line">        <span class="keyword">if</span> (len==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        Arrays.sort(citations);</span><br><span class="line">        <span class="keyword">int</span> h = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> currH = Math.min(citations[i], len-i);  <span class="comment">//得到当前的H指数</span></span><br><span class="line">            <span class="keyword">if</span>(currH&gt;h) h = currH;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> h;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="H-Index_-_H指数">H-Index - H指数</h3><p><strong>Description</strong>: Given an array of citations (each citation is a non-negative integ]]>
    </summary>
    
      <category term="LeetCode" scheme="http://eugeneyang.com/tags/LeetCode/"/>
    
      <category term="java" scheme="http://eugeneyang.com/tags/java/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/categories/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Integer to English Words - 整数转换为英语表述]]></title>
    <link href="http://eugeneyang.com/2016/05/16/Integer%20to%20English%20Words%20-%20%E6%95%B4%E6%95%B0%E8%BD%AC%E6%8D%A2%E4%B8%BA%E8%8B%B1%E8%AF%AD%E8%A1%A8%E8%BF%B0/"/>
    <id>http://eugeneyang.com/2016/05/16/Integer to English Words - 整数转换为英语表述/</id>
    <published>2016-05-16T12:44:47.000Z</published>
    <updated>2016-05-26T14:05:48.362Z</updated>
    <content type="html"><![CDATA[<h3 id="Integer_to_English_Words_-_整数转换为英语表述">Integer to English Words - 整数转换为英语表述</h3><p><strong>Description</strong>: Convert a non-negative integer to its english words representation. Given input is guaranteed to be less than 2^31 - 1.</p>
<p>For example,<br> 123 -&gt; “One Hundred Twenty Three”<br> 12345 -&gt; “Twelve Thousand Three Hundred Forty Five”<br> 1234567 -&gt; “One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven”</p>
<p>思路：每三位处理</p>
<p>参考链接：<a href="https://leetcode.com/problems/integer-to-english-words/" target="_blank" rel="external">https://leetcode.com/problems/integer-to-english-words/</a></p>
<p>完整的java代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerToEnglishWords</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String[] LESS_THAN_20 = &#123;<span class="string">""</span>, <span class="string">"One"</span>, <span class="string">"Two"</span>, <span class="string">"Three"</span>, <span class="string">"Four"</span>, <span class="string">"Five"</span>,</span><br><span class="line">            <span class="string">"Six"</span>, <span class="string">"Seven"</span>, <span class="string">"Eight"</span>, <span class="string">"Nine"</span>, <span class="string">"Ten"</span>,</span><br><span class="line">            <span class="string">"Eleven"</span>, <span class="string">"Twelve"</span>, <span class="string">"Thirteen"</span>, <span class="string">"Fourteen"</span>, <span class="string">"Fifteen"</span>,</span><br><span class="line">            <span class="string">"Sixteen"</span>, <span class="string">"Seventeen"</span>, <span class="string">"Eighteen"</span>, <span class="string">"Nineteen"</span>&#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String[] TENS = &#123;<span class="string">""</span>, <span class="string">"Ten"</span>, <span class="string">"Twenty"</span>, <span class="string">"Thirty"</span>, <span class="string">"Forty"</span>, <span class="string">"Fifty"</span>,</span><br><span class="line">            <span class="string">"Sixty"</span>, <span class="string">"Seventy"</span>, <span class="string">"Eighty"</span>, <span class="string">"Ninety"</span>&#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String[] THOUSANDS = &#123;<span class="string">""</span>, <span class="string">"Thousand"</span>, <span class="string">"Million"</span>, <span class="string">"Billion"</span>&#125;;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * https://leetcode.com/problems/integer-to-english-words/</span><br><span class="line">     * <span class="doctag">@param</span> num</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">numberToWords</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (num==<span class="number">0</span>) <span class="keyword">return</span> <span class="string">"Zero"</span>;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        String words = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">while</span> (num&gt;<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (num%<span class="number">1000</span> != <span class="number">0</span>)</span><br><span class="line">                words = helper(num%<span class="number">1000</span>)+THOUSANDS[i]+<span class="string">" "</span>+words;</span><br><span class="line">            num /= <span class="number">1000</span>;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> words.trim();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">helper</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;    <span class="comment">//处理三位数及以下</span></span><br><span class="line">        <span class="keyword">if</span> (num == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (num&lt;<span class="number">20</span>)</span><br><span class="line">            <span class="keyword">return</span> LESS_THAN_20[num] + <span class="string">" "</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (num&lt;<span class="number">100</span>)</span><br><span class="line">            <span class="keyword">return</span> TENS[num/<span class="number">10</span>] + <span class="string">" "</span> + helper(num%<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> LESS_THAN_20[num/<span class="number">100</span>] + <span class="string">" Hundred "</span> + helper(num%<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//另一种直观写法,速度快</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String[] belowTen = <span class="keyword">new</span> String[] &#123;<span class="string">""</span>, <span class="string">"One"</span>, <span class="string">"Two"</span>, <span class="string">"Three"</span>, <span class="string">"Four"</span>, <span class="string">"Five"</span>, <span class="string">"Six"</span>, <span class="string">"Seven"</span>, <span class="string">"Eight"</span>, <span class="string">"Nine"</span>&#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String[] belowTwenty = <span class="keyword">new</span> String[] &#123;<span class="string">"Ten"</span>, <span class="string">"Eleven"</span>, <span class="string">"Twelve"</span>, <span class="string">"Thirteen"</span>, <span class="string">"Fourteen"</span>, <span class="string">"Fifteen"</span>, <span class="string">"Sixteen"</span>, <span class="string">"Seventeen"</span>, <span class="string">"Eighteen"</span>, <span class="string">"Nineteen"</span>&#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String[] tens = <span class="keyword">new</span> String[] &#123;<span class="string">""</span>, <span class="string">"Ten"</span>, <span class="string">"Twenty"</span>, <span class="string">"Thirty"</span>, <span class="string">"Forty"</span>, <span class="string">"Fifty"</span>, <span class="string">"Sixty"</span>, <span class="string">"Seventy"</span>, <span class="string">"Eighty"</span>, <span class="string">"Ninety"</span>&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">numberToWords1</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (num == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">"Zero"</span>;</span><br><span class="line">        <span class="keyword">return</span> translate(num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">translate</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        String result = <span class="keyword">new</span> String();</span><br><span class="line">        <span class="keyword">if</span> (num &lt; <span class="number">10</span>) result = belowTen[num];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (num &lt; <span class="number">20</span>) result = belowTwenty[num-<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (num &lt; <span class="number">100</span>) result = tens[num/<span class="number">10</span>] + <span class="string">" "</span> + translate(num%<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (num &lt; <span class="number">1000</span>) result = translate(num/<span class="number">100</span>) + <span class="string">" Hundred "</span> +  translate(num%<span class="number">100</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (num &lt; <span class="number">1000000</span>) result = translate(num/<span class="number">1000</span>) + <span class="string">" Thousand "</span> +  translate(num%<span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (num &lt; <span class="number">1000000000</span>) result = translate(num/<span class="number">1000000</span>) + <span class="string">" Million "</span> +  translate(num%<span class="number">1000000</span>);</span><br><span class="line">        <span class="keyword">else</span> result = translate(num/<span class="number">1000000000</span>) + <span class="string">" Billion "</span> + translate(num%<span class="number">1000000000</span>);</span><br><span class="line">        <span class="keyword">return</span> result.trim();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Integer_to_English_Words_-_整数转换为英语表述">Integer to English Words - 整数转换为英语表述</h3><p><strong>Description</strong>: Convert a non-negati]]>
    </summary>
    
      <category term="LeetCode" scheme="http://eugeneyang.com/tags/LeetCode/"/>
    
      <category term="java" scheme="http://eugeneyang.com/tags/java/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/categories/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Missing Number - 缺失的数]]></title>
    <link href="http://eugeneyang.com/2016/05/15/Missing%20Number%20-%20%E7%BC%BA%E5%A4%B1%E7%9A%84%E6%95%B0/"/>
    <id>http://eugeneyang.com/2016/05/15/Missing Number - 缺失的数/</id>
    <published>2016-05-15T12:44:47.000Z</published>
    <updated>2016-05-26T14:05:48.360Z</updated>
    <content type="html"><![CDATA[<h3 id="Missing_Number_-_缺失的数">Missing Number - 缺失的数</h3><p><strong>Description</strong>: Given an array containing n distinct numbers taken from 0, 1, 2, …, n, find the one that is missing from the array.</p>
<p>For example, Given nums = [0, 1, 3] return 2.</p>
<p>Note: Your algorithm should run in linear runtime complexity.<br> Could you implement it using only constant extra space complexity?</p>
<p>思路：一、位操作(i与num[i]异或)<br>二、先求[1,n]间的和,再减去给定数组之和<br>三、普通置换思路</p>
<p>完整的java代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MissingNumber</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//位操作(i与num[i]异或)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">missingNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> xor = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;nums.length; i++) &#123;</span><br><span class="line">            xor = xor^i^nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> xor^i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//先求[1,n]间的和,再减去给定数组之和</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">missingNumber1</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = nums.length;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> n: nums) sum += n;</span><br><span class="line">        <span class="keyword">return</span> len*(len+<span class="number">1</span>)/<span class="number">2</span> - sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//普通置换思路</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">missingNumber2</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">while</span> (nums[i]!=-<span class="number">1</span> &amp;&amp; nums[i]!=i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[i]&gt;=nums.length) nums[i] = -<span class="number">1</span>; <span class="comment">//标记缺失位</span></span><br><span class="line">                <span class="keyword">else</span> swap(nums, i, nums[i]);    <span class="comment">//i与num[i]置换归位</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i]==-<span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = nums[i];</span><br><span class="line">        nums[i] = nums[j];</span><br><span class="line">        nums[j] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Missing_Number_-_缺失的数">Missing Number - 缺失的数</h3><p><strong>Description</strong>: Given an array containing n distinct numbers taken]]>
    </summary>
    
      <category term="LeetCode" scheme="http://eugeneyang.com/tags/LeetCode/"/>
    
      <category term="java" scheme="http://eugeneyang.com/tags/java/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/categories/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Ugly Number II - 丑数II]]></title>
    <link href="http://eugeneyang.com/2016/05/14/Ugly%20Number%20II%20-%20%E4%B8%91%E6%95%B0II/"/>
    <id>http://eugeneyang.com/2016/05/14/Ugly Number II - 丑数II/</id>
    <published>2016-05-14T12:44:47.000Z</published>
    <updated>2016-05-26T14:05:48.357Z</updated>
    <content type="html"><![CDATA[<h3 id="Ugly_Number_II_-_丑数II">Ugly Number II - 丑数II</h3><p><strong>Description</strong>: Write a program to find the n-th ugly number.<br> Ugly numbers are positive numbers whose prime factors only include 2, 3, 5.</p>
<p>For example, 1, 2, 3, 4, 5, 6, 8, 9, 10, 12 is the sequence of the first 10 ugly numbers.<br> Note that 1 is typically treated as an ugly number.</p>
<p>思路：一、最简单解法，对每个数判断isUgly()<br>二、DP: We have an array k of first n ugly number. We only know, at the beginning, the first one, which is 1. Then<br>     k[1] = min( k[0]x2, k[0]x3, k[0]x5). The answer is k[0]x2. So we move 2’s pointer to 1.<br>     Then we test:<br>     k[2] = min( k[1]x2, k[0]x3, k[0]x5). And so on.<br>     Be careful about the cases such as 6, in which we need to forward both pointers of 2 and 3. 共引入四个指针。</p>
<p>参考链接：<a href="https://leetcode.com/discuss/52905/my-16ms-c-dp-solution-with-short-explanation" target="_blank" rel="external">https://leetcode.com/discuss/52905/my-16ms-c-dp-solution-with-short-explanation</a></p>
<p>完整的java代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UglyNumberII</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**https://leetcode.com/discuss/52905/my-16ms-c-dp-solution-with-short-explanation</span><br><span class="line">     * DP: We have an array k of first n ugly number. We only know, at the beginning, the first one, which is 1. Then</span><br><span class="line">     k[1] = min( k[0]x2, k[0]x3, k[0]x5). The answer is k[0]x2. So we move 2's pointer to 1.</span><br><span class="line">     Then we test:</span><br><span class="line">     k[2] = min( k[1]x2, k[0]x3, k[0]x5). And so on.</span><br><span class="line">     Be careful about the cases such as 6, in which we need to forward both pointers of 2 and 3.</span><br><span class="line">     * <span class="doctag">@param</span> n</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">nthUglyNumber</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] uglys = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        uglys[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> i2 = <span class="number">0</span>, i3 = <span class="number">0</span>, i5 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;   <span class="comment">//共i,i2,i3,i5四个指针移动</span></span><br><span class="line">            <span class="keyword">int</span> u2 = uglys[i2]*<span class="number">2</span>, u3 = uglys[i3]*<span class="number">3</span>, u5 = uglys[i5]*<span class="number">5</span>;</span><br><span class="line">            <span class="comment">// generate ugly number by multiply all the factors</span></span><br><span class="line">            uglys[i] = Math.min(u2, Math.min(u3, u5));</span><br><span class="line">            <span class="comment">// bump up index for the current minimum ugly number</span></span><br><span class="line">            <span class="keyword">if</span> (uglys[i] == u2) i2++;</span><br><span class="line">            <span class="keyword">if</span> (uglys[i] == u3) i3++;   <span class="comment">//不能用else if</span></span><br><span class="line">            <span class="keyword">if</span> (uglys[i] == u5) i5++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> uglys[n-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Ugly_Number_II_-_丑数II">Ugly Number II - 丑数II</h3><p><strong>Description</strong>: Write a program to find the n-th ugly number.<br> ]]>
    </summary>
    
      <category term="LeetCode" scheme="http://eugeneyang.com/tags/LeetCode/"/>
    
      <category term="java" scheme="http://eugeneyang.com/tags/java/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/categories/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Ugly Number - 丑数]]></title>
    <link href="http://eugeneyang.com/2016/05/13/Ugly%20Number%20-%20%E4%B8%91%E6%95%B0/"/>
    <id>http://eugeneyang.com/2016/05/13/Ugly Number - 丑数/</id>
    <published>2016-05-13T12:44:47.000Z</published>
    <updated>2016-05-26T14:05:48.355Z</updated>
    <content type="html"><![CDATA[<h3 id="Ugly_Number_-_丑数">Ugly Number - 丑数</h3><p><strong>Description</strong>: Write a program to check whether a given number is an ugly number. Ugly numbers are positive numbers whose prime factors only include 2, 3, 5.</p>
<p>For example, 6, 8 are ugly while 14 is not ugly since it includes another prime factor 7. Note that 1 is typically treated as an ugly number.</p>
<p>思路：尽可能将num依次被2,3,5除尽,检测结果是否为1.</p>
<p>完整的java代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UglyNumber</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**简洁</span><br><span class="line">     * Just divide by 2, 3 and 5 as often as possible and then check whether we arrived at 1.</span><br><span class="line">     Also try divisor 4 if that makes the code simpler / less repetitive.</span><br><span class="line">     * <span class="doctag">@param</span> num</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isUgly1</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (num&lt;=<span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;<span class="number">6</span>; i++)&#123;    <span class="comment">//2,3,4,5</span></span><br><span class="line">            <span class="keyword">while</span> (num%i==<span class="number">0</span>) num /= i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num==<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//易于理解:尽可能将num依次被2,3,5除尽,检测结果是否为1.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isUgly</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(num==<span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(num==<span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">while</span>(num%<span class="number">2</span>==<span class="number">0</span>) num /= <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span>(num%<span class="number">3</span>==<span class="number">0</span>) num /= <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">while</span>(num%<span class="number">5</span>==<span class="number">0</span>) num /= <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">return</span> num==<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Ugly_Number_-_丑数">Ugly Number - 丑数</h3><p><strong>Description</strong>: Write a program to check whether a given number is an ugly n]]>
    </summary>
    
      <category term="LeetCode" scheme="http://eugeneyang.com/tags/LeetCode/"/>
    
      <category term="java" scheme="http://eugeneyang.com/tags/java/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/categories/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Single Number III - 寻找单一整数III]]></title>
    <link href="http://eugeneyang.com/2016/05/12/Single%20Number%20III%20-%20%E5%AF%BB%E6%89%BE%E5%8D%95%E4%B8%80%E6%95%B4%E6%95%B0III/"/>
    <id>http://eugeneyang.com/2016/05/12/Single Number III - 寻找单一整数III/</id>
    <published>2016-05-12T12:44:47.000Z</published>
    <updated>2016-05-26T14:05:48.353Z</updated>
    <content type="html"><![CDATA[<h3 id="Single_Number_III_-_寻找单一整数III">Single Number III - 寻找单一整数III</h3><p><strong>Description</strong>: Given an array of numbers nums, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once.</p>
<p>For example: Given nums = [1, 2, 1, 3, 2, 5], return [3, 5].</p>
<p>Note: The order of the result is not important. So in the above example, [5, 3] is also correct.<br> Your algorithm should run in linear runtime complexity. Could you implement it using only constant space complexity?</p>
<p>思路：先将所有的数异或，得到的将是x和y以后之后的值xy。<br>     找到xy为1的某一位（为了方便就取最右边为1的一位，取法为xy &amp; ~(xy-1)，<br>     再将这一位为1的所有数异或得到x，剩下的所有数异或得到y。</p>
<p>参考链接：<a href="http://www.kancloud.cn/kancloud/data-structure-and-algorithm-notes/72983" target="_blank" rel="external">http://www.kancloud.cn/kancloud/data-structure-and-algorithm-notes/72983</a></p>
<p>完整的java代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleNumberIII</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * http://www.kancloud.cn/kancloud/data-structure-and-algorithm-notes/72983</span><br><span class="line">     * 先将所有的数异或，得到的将是x和y以后之后的值xy。</span><br><span class="line">     找到xy为1的某一位（为了方便就取最右边为1的一位，取法为xy &amp; ~(xy-1)，</span><br><span class="line">     再将这一位为1的所有数异或得到x，剩下的所有数异或得到y。</span><br><span class="line">     * <span class="doctag">@param</span> nums</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] singleNumber(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">if</span> (nums==<span class="keyword">null</span> || nums.length==<span class="number">0</span>) <span class="keyword">return</span> result;</span><br><span class="line">        <span class="keyword">int</span> xy = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i: nums)  xy ^= i;</span><br><span class="line">        <span class="comment">// get the last 1 bit of xXORy, e.g. 1010 ==&gt; 0010</span></span><br><span class="line">        <span class="keyword">int</span> last1Bit = xy &amp; ~(xy-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">0</span>, y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i: nums) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((last1Bit &amp; i) == <span class="number">0</span>) x ^= i;</span><br><span class="line">            <span class="keyword">else</span> y ^= i;</span><br><span class="line">        &#125;</span><br><span class="line">        result[<span class="number">0</span>] = x;</span><br><span class="line">        result[<span class="number">1</span>] = y;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Single_Number_III_-_寻找单一整数III">Single Number III - 寻找单一整数III</h3><p><strong>Description</strong>: Given an array of numbers nums, in]]>
    </summary>
    
      <category term="LeetCode" scheme="http://eugeneyang.com/tags/LeetCode/"/>
    
      <category term="java" scheme="http://eugeneyang.com/tags/java/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/categories/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Add Digits - 数根（数字各位相加）]]></title>
    <link href="http://eugeneyang.com/2016/05/11/Add%20Digits%20-%20%E6%95%B0%E6%A0%B9%EF%BC%88%E6%95%B0%E5%AD%97%E5%90%84%E4%BD%8D%E7%9B%B8%E5%8A%A0%EF%BC%89/"/>
    <id>http://eugeneyang.com/2016/05/11/Add Digits - 数根（数字各位相加）/</id>
    <published>2016-05-11T12:44:47.000Z</published>
    <updated>2016-05-26T14:05:48.351Z</updated>
    <content type="html"><![CDATA[<h3 id="Add_Digits_-_数根（数字各位相加）">Add Digits - 数根（数字各位相加）</h3><p><strong>Description</strong>: Given a non-negative integer num, repeatedly add all its digits until the result has only one digit.</p>
<p>For example: Given num = 38, the process is like: 3 + 8 = 11, 1 + 1 = 2. Since 2 has only one digit, return it.</p>
<p>思路：一、递归相加。<br>二、结果存在固有的周期性:<br>     ~input: 0 1 2 3 4 …<br>     output: 0 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 ….</p>
<p>完整的java代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddDigits</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 结果存在固有的周期性:</span><br><span class="line">     ~input: 0 1 2 3 4 ...</span><br><span class="line">     output: 0 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 ....</span><br><span class="line">     * <span class="doctag">@param</span> num</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addDigits</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>+(num-<span class="number">1</span>)%<span class="number">9</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">addDigits1</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> addAll(String.valueOf(num));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">addAll</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s.length()==<span class="number">1</span>) <span class="keyword">return</span> Integer.valueOf(s);</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;s.length(); i++)&#123;</span><br><span class="line">            sum += Integer.valueOf(s.charAt(i)-<span class="string">'0'</span>);    <span class="comment">//TODO Integer.valueOf(s.charAt(i))是ASCII值</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> addAll(String.valueOf(sum));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Add_Digits_-_数根（数字各位相加）">Add Digits - 数根（数字各位相加）</h3><p><strong>Description</strong>: Given a non-negative integer num, repeatedly a]]>
    </summary>
    
      <category term="LeetCode" scheme="http://eugeneyang.com/tags/LeetCode/"/>
    
      <category term="java" scheme="http://eugeneyang.com/tags/java/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/categories/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Binary Tree Paths - 二叉树路径]]></title>
    <link href="http://eugeneyang.com/2016/05/10/Binary%20Tree%20Paths%20-%20%E4%BA%8C%E5%8F%89%E6%A0%91%E8%B7%AF%E5%BE%84/"/>
    <id>http://eugeneyang.com/2016/05/10/Binary Tree Paths - 二叉树路径/</id>
    <published>2016-05-10T12:44:47.000Z</published>
    <updated>2016-05-26T14:05:48.348Z</updated>
    <content type="html"><![CDATA[<h3 id="Binary_Tree_Paths_-_二叉树路径">Binary Tree Paths - 二叉树路径</h3><p><strong>Description</strong>: Given a binary tree, return all root-to-leaf paths.</p>
<p>原题链接：<a href="https://leetcode.com/problems/binary-tree-paths/" target="_blank" rel="external">https://leetcode.com/problems/binary-tree-paths/</a></p>
<p>思路：递归。</p>
<p>参考链接：<a href="https://leetcode.com/discuss/52072/accepted-java-simple-solution-in-8-lines" target="_blank" rel="external">https://leetcode.com/discuss/52072/accepted-java-simple-solution-in-8-lines</a></p>
<p>完整的java代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">binaryTreePaths</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (root!=<span class="keyword">null</span>) searchBT(root, <span class="string">""</span>, result);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">searchBT</span><span class="params">(TreeNode root, String path, List&lt;String&gt; result)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root.left==<span class="keyword">null</span> &amp;&amp; root.right==<span class="keyword">null</span>) result.add(path+root.val);</span><br><span class="line">    <span class="keyword">if</span> (root.left!=<span class="keyword">null</span>) searchBT(root.left, path+root.val+<span class="string">"-&gt;"</span>, result);</span><br><span class="line">    <span class="keyword">if</span> (root.right!=<span class="keyword">null</span>) searchBT(root.right, path+root.val+<span class="string">"-&gt;"</span>, result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Binary_Tree_Paths_-_二叉树路径">Binary Tree Paths - 二叉树路径</h3><p><strong>Description</strong>: Given a binary tree, return all root-to-le]]>
    </summary>
    
      <category term="LeetCode" scheme="http://eugeneyang.com/tags/LeetCode/"/>
    
      <category term="java" scheme="http://eugeneyang.com/tags/java/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/categories/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Different Ways to Add Parentheses - 不同添加括号的方式]]></title>
    <link href="http://eugeneyang.com/2016/05/05/Different%20Ways%20to%20Add%20Parentheses%20-%20%E4%B8%8D%E5%90%8C%E6%B7%BB%E5%8A%A0%E6%8B%AC%E5%8F%B7%E7%9A%84%E6%96%B9%E5%BC%8F/"/>
    <id>http://eugeneyang.com/2016/05/05/Different Ways to Add Parentheses - 不同添加括号的方式/</id>
    <published>2016-05-05T12:44:47.000Z</published>
    <updated>2016-05-06T09:07:16.123Z</updated>
    <content type="html"><![CDATA[<h3 id="Different_Ways_to_Add_Parentheses_-_不同添加括号的方式">Different Ways to Add Parentheses - 不同添加括号的方式</h3><p><strong>Description</strong>: Given a string of numbers and operators, return all possible results from computing all the different possible ways to group numbers and operators. The valid operators are +, - and *.</p>
<p>Example Input: Input: “2<em>3-4</em>5”<br> (2<em>(3-(4</em>5))) = -34<br> ((2<em>3)-(4</em>5)) = -14<br> ((2<em>(3-4))</em>5) = -10<br> (2<em>((3-4)</em>5)) = -10<br> (((2<em>3)-4)</em>5) = 10<br> Output: [-34, -14, -10, -10, 10]</p>
<p>思路：分治法:对于输入字符串，若其中有运算符，则将其分为两部分，分别递归计算其值，然后将左值集合与右值集合进行交叉运算，将运算结果放入结果集中；若没有运算符，则直接将字符串转化为整型数放入结果集中。</p>
<p>参考链接：<a href="http://blog.csdn.net/foreverling/article/details/49742089" target="_blank" rel="external">http://blog.csdn.net/foreverling/article/details/49742089</a></p>
<p>完整的java代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DifferentWaysToAddParentheses</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * http://blog.csdn.net/foreverling/article/details/49742089</span><br><span class="line">     * 分治法:对于输入字符串，若其中有运算符，则将其分为两部分，分别递归计算其值，然后将左值集合与右值集合进行交叉运算，</span><br><span class="line">     将运算结果放入结果集中；若没有运算符，则直接将字符串转化为整型数放入结果集中。</span><br><span class="line">     * <span class="doctag">@param</span> input</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">diffWaysToCompute</span><span class="params">(String input)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;input.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> ch = input.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (ch==<span class="string">'+'</span> || ch==<span class="string">'-'</span> || ch==<span class="string">'*'</span>) &#123;</span><br><span class="line">                List&lt;Integer&gt; left = diffWaysToCompute(input.substring(<span class="number">0</span>, i));</span><br><span class="line">                List&lt;Integer&gt; right = diffWaysToCompute(input.substring(i + <span class="number">1</span>));</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> n : left) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> m : right) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (ch==<span class="string">'+'</span>) res.add(n+m);</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span> (ch==<span class="string">'-'</span>) res.add(n-m);</span><br><span class="line">                        <span class="keyword">else</span> res.add(n*m);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (res.size()==<span class="number">0</span>)  res.add(Integer.parseInt(input));</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Different_Ways_to_Add_Parentheses_-_不同添加括号的方式">Different Ways to Add Parentheses - 不同添加括号的方式</h3><p><strong>Description</strong>: Gi]]>
    </summary>
    
      <category term="LeetCode" scheme="http://eugeneyang.com/tags/LeetCode/"/>
    
      <category term="java" scheme="http://eugeneyang.com/tags/java/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/categories/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Search a 2D Matrix II - 搜索2D矩阵II]]></title>
    <link href="http://eugeneyang.com/2016/05/04/Search%20a%202D%20Matrix%20II%20-%20%E6%90%9C%E7%B4%A22D%E7%9F%A9%E9%98%B5II/"/>
    <id>http://eugeneyang.com/2016/05/04/Search a 2D Matrix II - 搜索2D矩阵II/</id>
    <published>2016-05-04T12:44:47.000Z</published>
    <updated>2016-05-06T09:07:16.121Z</updated>
    <content type="html"><![CDATA[<h3 id="Search_a_2D_Matrix_II_-_搜索2D矩阵II">Search a 2D Matrix II - 搜索2D矩阵II</h3><p><strong>Description</strong>: Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:<br> Integers in each row are sorted in ascending from left to right.<br> Integers in each column are sorted in ascending from top to bottom.</p>
<p>For example, Consider the following matrix:<br> [<br> [1,   4,  7, 11, 15],<br> [2,   5,  8, 12, 19],<br> [3,   6,  9, 16, 22],<br> [10, 13, 14, 17, 24],<br> [18, 21, 23, 26, 30]<br> ]<br> Given target = 5, return true.<br> Given target = 20, return false.</p>
<p>思路：均从右上角开始搜索.</p>
<p>完整的java代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Search2DMatrixII</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 均从右上角开始搜索</span><br><span class="line">     * <span class="doctag">@param</span> matrix</span><br><span class="line">     * <span class="doctag">@param</span> target</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">searchMatrix</span><span class="params">(<span class="keyword">int</span>[][] matrix, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = matrix.length, n = matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, j = n-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">boolean</span> found = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">while</span> (i&lt;m &amp;&amp; j&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (matrix[i][j]==target)&#123;</span><br><span class="line">                found = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (matrix[i][j]&lt;target) i++;</span><br><span class="line">            <span class="keyword">else</span> j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> found;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Search_a_2D_Matrix_II_-_搜索2D矩阵II">Search a 2D Matrix II - 搜索2D矩阵II</h3><p><strong>Description</strong>: Write an efficient algorithm]]>
    </summary>
    
      <category term="LeetCode" scheme="http://eugeneyang.com/tags/LeetCode/"/>
    
      <category term="java" scheme="http://eugeneyang.com/tags/java/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/categories/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Sliding Window Maximum - 滑动窗口最大值]]></title>
    <link href="http://eugeneyang.com/2016/05/03/Sliding%20Window%20Maximum%20-%20%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%9C%80%E5%A4%A7%E5%80%BC/"/>
    <id>http://eugeneyang.com/2016/05/03/Sliding Window Maximum - 滑动窗口最大值/</id>
    <published>2016-05-03T12:44:47.000Z</published>
    <updated>2016-05-06T09:07:16.119Z</updated>
    <content type="html"><![CDATA[<h3 id="Sliding_Window_Maximum_-_滑动窗口最大值">Sliding Window Maximum - 滑动窗口最大值</h3><p><strong>Description</strong>: Given an array nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position.</p>
<p>思路：一、双端队列维护窗口(存下标). 时间O(N) 空间O(K)<br>二、优先队列(堆)维护窗口. 时间O(NlogK) 空间O(K)</p>
<p>参考链接：<a href="https://segmentfault.com/a/1190000003903509" target="_blank" rel="external">https://segmentfault.com/a/1190000003903509</a></p>
<p>完整的java代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SlidingWindowMaximum</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * https://segmentfault.com/a/1190000003903509</span><br><span class="line">     * 双端队列维护窗口(存下标). 时间O(N) 空间O(K)</span><br><span class="line">     * <span class="doctag">@param</span> nums</span><br><span class="line">     * <span class="doctag">@param</span> k</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] maxSlidingWindow(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k) &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> len = nums.length;</span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[len-k+<span class="number">1</span>];</span><br><span class="line">        ArrayDeque&lt;Integer&gt; deque = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;len; i++)&#123;</span><br><span class="line">            <span class="comment">// 每当新数进来时，如果发现队列头部的数的下标，是窗口最左边数的下标，则扔掉</span></span><br><span class="line">            <span class="keyword">if</span>(!deque.isEmpty() &amp;&amp; deque.peekFirst() == i-k) deque.poll();</span><br><span class="line">            <span class="comment">// 把队列尾部所有比新数小的都扔掉，保证队列是降序的</span></span><br><span class="line">            <span class="keyword">while</span>(!deque.isEmpty() &amp;&amp; nums[deque.peekLast()]&lt;nums[i]) deque.removeLast();</span><br><span class="line">            <span class="comment">// 加入新数</span></span><br><span class="line">            deque.offerLast(i);</span><br><span class="line">            <span class="comment">// 队列头部就是该窗口内第一大的</span></span><br><span class="line">            <span class="keyword">if</span>(i+<span class="number">1</span>&gt;=k) res[i-k+<span class="number">1</span>] = nums[deque.peek()];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//优先队列(堆)维护窗口. 时间O(NlogK) 空间O(K)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] maxSlidingWindow1(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k) &#123;</span><br><span class="line">        <span class="keyword">int</span> len = nums.length;</span><br><span class="line">        <span class="keyword">if</span> (len==<span class="number">0</span> || k==<span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[len-k+<span class="number">1</span>];</span><br><span class="line">        PriorityQueue&lt;Integer&gt; queue = <span class="keyword">new</span> PriorityQueue&lt;&gt;(Collections.reverseOrder());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;k; i++)&#123;</span><br><span class="line">            queue.offer(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        result[<span class="number">0</span>] = queue.peek();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=k; i&lt;len; i++)&#123;</span><br><span class="line">            queue.remove(nums[i-k]);</span><br><span class="line">            queue.offer(nums[i]);</span><br><span class="line">            result[i-k+<span class="number">1</span>] = queue.peek();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Sliding_Window_Maximum_-_滑动窗口最大值">Sliding Window Maximum - 滑动窗口最大值</h3><p><strong>Description</strong>: Given an array nums, there i]]>
    </summary>
    
      <category term="LeetCode" scheme="http://eugeneyang.com/tags/LeetCode/"/>
    
      <category term="java" scheme="http://eugeneyang.com/tags/java/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法" scheme="http://eugeneyang.com/categories/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
